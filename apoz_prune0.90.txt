----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 32, 75, 75]             864             864
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 32, 75, 75]              64              64
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 32, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 32, 75, 75]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 32, 75, 75]              64              64
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 32, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             512             512
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 96, 75, 75]           1,536           1,536
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 96, 75, 75]             192             192
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 96, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 96, 38, 38]             864             864
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 96, 38, 38]             192             192
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 144, 38, 38]           1,296           1,296
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 144, 19, 19]           3,600           3,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 144, 19, 19]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,760           5,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,377,413
Trainable params: 3,377,413
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
17
tensor([2, 2, 0, 3, 2, 3, 0, 2, 2, 2, 2, 2, 1, 2, 3, 2, 0, 0, 2, 2, 4, 2, 2, 2,
        2, 3, 4, 2, 2, 2, 2, 4])
tensor([4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 2, 3, 1, 3, 2, 2, 4, 4,
        2, 2, 0, 2, 4, 3, 3, 2])
tensor([4, 2, 0, 2, 2, 2, 2, 3, 2, 3, 3, 1, 1, 1, 2, 1, 4, 1, 2, 4, 2, 2, 2, 2,
        2, 3, 4, 2, 1, 2, 4, 2])
tensor([1, 2, 4, 2, 2, 2, 2, 2, 2, 3, 1, 0, 2, 4, 2, 2, 4, 4, 4, 4, 0, 0, 2, 2,
        4, 2, 2, 2, 2, 2, 2, 0])
tensor([2, 2, 4, 2, 2, 2, 2, 1, 0, 1, 4, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0, 4, 2,
        2, 2, 2, 2, 2, 3, 0, 2])
tensor([4, 1, 3, 2, 2, 4, 3, 2, 0, 2, 2, 4, 2, 3, 0, 4, 3, 3, 3, 2, 2, 3, 3, 3,
        4, 2, 1, 4, 2, 2, 0, 2])
tensor([4, 2, 2, 3, 2, 2, 2, 3, 2, 2, 4, 3, 2, 0, 3, 2, 2, 2, 4, 1, 2, 2, 1, 2,
        2, 2, 2, 2, 0, 2, 2, 2])
tensor([2, 2, 1, 4, 1, 2, 3, 1, 4, 2, 3, 2, 2, 2, 4, 4, 2, 0, 2, 2, 1, 0, 4, 2,
        3, 4, 4, 1, 3, 2, 3, 2])
tensor([4, 2, 3, 2, 3, 2, 2, 3, 0, 2, 3, 2, 1, 2, 0, 1, 4, 0, 2, 2, 1, 4, 2, 4,
        4, 4, 1, 4, 0, 2, 2, 2])
tensor([2, 2, 4, 2, 3, 2, 4, 2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 4, 4, 4, 4, 2, 2, 2,
        2, 1, 1, 1, 4, 2, 2, 4])
tensor([2, 2, 2, 4, 0, 1, 2, 3, 4, 2, 4, 2, 0, 2, 2, 2, 3, 2, 4, 3, 2, 2, 2, 2,
        2, 2, 0, 2, 2, 2, 3, 3])
tensor([3, 2, 3, 2, 2, 4, 1, 0, 2, 4, 0, 1, 0, 0, 1, 1, 2, 2, 2, 1, 2, 4, 2, 0,
        0, 2, 2, 2, 4, 2, 0, 2])
tensor([2, 3, 2, 3, 2, 1, 2, 2, 1, 1, 3, 3, 2, 2, 0, 2, 4, 2, 4, 2, 2, 4, 0, 4,
        2, 2, 4, 2, 2, 3, 4, 2])
tensor([2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 2, 0, 2, 2, 1, 2, 3, 3, 3, 2, 2, 3, 4, 2,
        0, 2, 2, 0, 2, 3, 3, 3])
tensor([2, 0, 2, 4, 4, 1, 2, 3, 2, 3, 3, 3, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 2, 0,
        2, 2, 3, 2, 4, 4, 2, 2])
tensor([2, 2, 4, 2, 0, 4, 2, 2, 2, 1, 2, 1, 1, 2, 3, 1, 2, 4, 3, 3, 2, 1, 3, 4,
        2, 0, 2, 1, 2, 3, 0, 2])
tensor([1, 1, 0, 4, 3, 4, 2, 4, 4, 2, 2, 1, 2, 4, 4, 2, 0, 2, 2, 3, 2, 4, 2])
backbone.stem.0
5

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.stem.0 (Conv2d(3, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)) => prune_out_channels on backbone.stem.0 (Conv2d(3, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)), #idxs=5
[1] prune_out_channels on backbone.stem.0 (Conv2d(3, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)) => prune_out_channels on backbone.stem.1 (BatchNorm2d(27, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[2] prune_out_channels on backbone.stem.1 (BatchNorm2d(27, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_26(HardtanhBackward0), #idxs=5
[3] prune_out_channels on _ElementWiseOp_26(HardtanhBackward0) => prune_out_channels on backbone.blocks.0.0._depthwise_conv (Conv2d(27, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=27, bias=False)), #idxs=5
[4] prune_out_channels on backbone.blocks.0.0._depthwise_conv (Conv2d(27, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=27, bias=False)) => prune_out_channels on backbone.blocks.0.0._bn1 (BatchNorm2d(27, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[5] prune_out_channels on backbone.blocks.0.0._bn1 (BatchNorm2d(27, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_25(HardtanhBackward0), #idxs=5
[6] prune_out_channels on _ElementWiseOp_25(HardtanhBackward0) => prune_in_channels on backbone.blocks.0.0._project_conv (Conv2d(27, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.stem.0
48
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True, False])
torch.Size([32])
torch.Size([27])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.0.0._depthwise_conv
47
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True, False])
torch.Size([32])
torch.Size([27])
backbone.blocks.0.0._depthwise_conv
0
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.0.0._depthwise_conv (Conv2d(27, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=27, bias=False)) => prune_out_channels on backbone.blocks.0.0._depthwise_conv (Conv2d(27, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=27, bias=False)), #idxs=0
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.0.0._depthwise_conv
47
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True])
torch.Size([27])
torch.Size([27])
backbone.blocks.0.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.0.0._project_conv (Conv2d(27, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.0.0._project_conv (Conv2d(27, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.0.0._project_conv
46
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([16])
torch.Size([16])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 96, 75, 75]           1,536           1,536
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 96, 75, 75]             192             192
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 96, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 96, 38, 38]             864             864
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 96, 38, 38]             192             192
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 144, 38, 38]           1,296           1,296
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 144, 19, 19]           3,600           3,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 144, 19, 19]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,760           5,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,377,133
Trainable params: 3,377,133
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.1.0._expand_conv
7

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.0._expand_conv (Conv2d(16, 89, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.0._expand_conv (Conv2d(16, 89, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=7
[1] prune_out_channels on backbone.blocks.1.0._expand_conv (Conv2d(16, 89, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.0._bn0 (BatchNorm2d(89, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=7
[2] prune_out_channels on backbone.blocks.1.0._bn0 (BatchNorm2d(89, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_24(HardtanhBackward0), #idxs=7
[3] prune_out_channels on _ElementWiseOp_24(HardtanhBackward0) => prune_out_channels on backbone.blocks.1.0._depthwise_conv (Conv2d(89, 89, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=89, bias=False)), #idxs=7
[4] prune_out_channels on backbone.blocks.1.0._depthwise_conv (Conv2d(89, 89, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=89, bias=False)) => prune_out_channels on backbone.blocks.1.0._bn1 (BatchNorm2d(89, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=7
[5] prune_out_channels on backbone.blocks.1.0._bn1 (BatchNorm2d(89, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_23(HardtanhBackward0), #idxs=7
[6] prune_out_channels on _ElementWiseOp_23(HardtanhBackward0) => prune_in_channels on backbone.blocks.1.0._project_conv (Conv2d(89, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=7
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.1.0._expand_conv
45
tensor([ True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True])
torch.Size([96])
torch.Size([89])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.1.0._depthwise_conv
44
tensor([ True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True])
torch.Size([96])
torch.Size([89])
backbone.blocks.1.0._depthwise_conv
0
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.0._depthwise_conv (Conv2d(89, 89, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=89, bias=False)) => prune_out_channels on backbone.blocks.1.0._depthwise_conv (Conv2d(89, 89, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=89, bias=False)), #idxs=0
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.1.0._depthwise_conv
44
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True])
torch.Size([89])
torch.Size([89])
backbone.blocks.1.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.0._project_conv (Conv2d(89, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.0._project_conv (Conv2d(89, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.1.0._project_conv
43
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([24])
torch.Size([24])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 144, 38, 38]           1,296           1,296
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 144, 19, 19]           3,600           3,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 144, 19, 19]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,760           5,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,376,762
Trainable params: 3,376,762
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.1.1._expand_conv
5

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.1._expand_conv (Conv2d(24, 139, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.1._expand_conv (Conv2d(24, 139, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
[1] prune_out_channels on backbone.blocks.1.1._expand_conv (Conv2d(24, 139, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.1._bn0 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[2] prune_out_channels on backbone.blocks.1.1._bn0 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_28(HardtanhBackward0), #idxs=5
[3] prune_out_channels on _ElementWiseOp_28(HardtanhBackward0) => prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(139, 139, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=139, bias=False)), #idxs=5
[4] prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(139, 139, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=139, bias=False)) => prune_out_channels on backbone.blocks.1.1._bn1 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[5] prune_out_channels on backbone.blocks.1.1._bn1 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_27(HardtanhBackward0), #idxs=5
[6] prune_out_channels on _ElementWiseOp_27(HardtanhBackward0) => prune_in_channels on backbone.blocks.1.1._project_conv (Conv2d(139, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.1.1._expand_conv
42
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True])
torch.Size([144])
torch.Size([139])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.1.1._depthwise_conv
41
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True])
torch.Size([144])
torch.Size([139])
backbone.blocks.1.1._depthwise_conv
8
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(131, 131, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=131, bias=False)) => prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(131, 131, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=131, bias=False)), #idxs=8
[1] prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(131, 131, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=131, bias=False)) => prune_out_channels on _ElementWiseOp_28(HardtanhBackward0), #idxs=8
[2] prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(131, 131, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=131, bias=False)) => prune_out_channels on backbone.blocks.1.1._bn1 (BatchNorm2d(131, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[3] prune_out_channels on backbone.blocks.1.1._bn1 (BatchNorm2d(131, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_27(HardtanhBackward0), #idxs=8
[4] prune_out_channels on _ElementWiseOp_27(HardtanhBackward0) => prune_in_channels on backbone.blocks.1.1._project_conv (Conv2d(131, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
[5] prune_out_channels on _ElementWiseOp_28(HardtanhBackward0) => prune_out_channels on backbone.blocks.1.1._bn0 (BatchNorm2d(131, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[6] prune_out_channels on backbone.blocks.1.1._bn0 (BatchNorm2d(131, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.1.1._expand_conv (Conv2d(24, 131, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.1.1._depthwise_conv
41
tensor([False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([139])
torch.Size([131])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.1.1._expand_conv
42
tensor([False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([139])
torch.Size([131])
backbone.blocks.1.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.1._project_conv (Conv2d(131, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.1._project_conv (Conv2d(131, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.1.1._project_conv
40
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([24])
torch.Size([24])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 144, 19, 19]           3,600           3,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 144, 19, 19]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,760           5,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,375,969
Trainable params: 3,375,969
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.2.0._expand_conv
5

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.0._expand_conv (Conv2d(24, 139, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.0._expand_conv (Conv2d(24, 139, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
[1] prune_out_channels on backbone.blocks.2.0._expand_conv (Conv2d(24, 139, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.0._bn0 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[2] prune_out_channels on backbone.blocks.2.0._bn0 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_21(HardtanhBackward0), #idxs=5
[3] prune_out_channels on _ElementWiseOp_21(HardtanhBackward0) => prune_out_channels on backbone.blocks.2.0._depthwise_conv (Conv2d(139, 139, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=139, bias=False)), #idxs=5
[4] prune_out_channels on backbone.blocks.2.0._depthwise_conv (Conv2d(139, 139, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=139, bias=False)) => prune_out_channels on backbone.blocks.2.0._bn1 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[5] prune_out_channels on backbone.blocks.2.0._bn1 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_20(HardtanhBackward0), #idxs=5
[6] prune_out_channels on _ElementWiseOp_20(HardtanhBackward0) => prune_in_channels on backbone.blocks.2.0._project_conv (Conv2d(139, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.2.0._expand_conv
39
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True])
torch.Size([144])
torch.Size([139])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.2.0._depthwise_conv
38
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True])
torch.Size([144])
torch.Size([139])
backbone.blocks.2.0._depthwise_conv
0
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.0._depthwise_conv (Conv2d(139, 139, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=139, bias=False)) => prune_out_channels on backbone.blocks.2.0._depthwise_conv (Conv2d(139, 139, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=139, bias=False)), #idxs=0
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.2.0._depthwise_conv
38
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True])
torch.Size([139])
torch.Size([139])
backbone.blocks.2.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.0._project_conv (Conv2d(139, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.0._project_conv (Conv2d(139, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.2.0._project_conv
37
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([40])
torch.Size([40])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,375,504
Trainable params: 3,375,504
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.2.1._expand_conv
8

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.1._expand_conv (Conv2d(40, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.1._expand_conv (Conv2d(40, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
[1] prune_out_channels on backbone.blocks.2.1._expand_conv (Conv2d(40, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.1._bn0 (BatchNorm2d(232, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[2] prune_out_channels on backbone.blocks.2.1._bn0 (BatchNorm2d(232, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_30(HardtanhBackward0), #idxs=8
[3] prune_out_channels on _ElementWiseOp_30(HardtanhBackward0) => prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(232, 232, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=232, bias=False)), #idxs=8
[4] prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(232, 232, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=232, bias=False)) => prune_out_channels on backbone.blocks.2.1._bn1 (BatchNorm2d(232, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[5] prune_out_channels on backbone.blocks.2.1._bn1 (BatchNorm2d(232, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_29(HardtanhBackward0), #idxs=8
[6] prune_out_channels on _ElementWiseOp_29(HardtanhBackward0) => prune_in_channels on backbone.blocks.2.1._project_conv (Conv2d(232, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.2.1._expand_conv
36
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True])
torch.Size([240])
torch.Size([232])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.2.1._depthwise_conv
35
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True])
torch.Size([240])
torch.Size([232])
backbone.blocks.2.1._depthwise_conv
22
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(210, 210, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=210, bias=False)) => prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(210, 210, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=210, bias=False)), #idxs=22
[1] prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(210, 210, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=210, bias=False)) => prune_out_channels on _ElementWiseOp_30(HardtanhBackward0), #idxs=22
[2] prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(210, 210, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=210, bias=False)) => prune_out_channels on backbone.blocks.2.1._bn1 (BatchNorm2d(210, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=22
[3] prune_out_channels on backbone.blocks.2.1._bn1 (BatchNorm2d(210, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_29(HardtanhBackward0), #idxs=22
[4] prune_out_channels on _ElementWiseOp_29(HardtanhBackward0) => prune_in_channels on backbone.blocks.2.1._project_conv (Conv2d(210, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=22
[5] prune_out_channels on _ElementWiseOp_30(HardtanhBackward0) => prune_out_channels on backbone.blocks.2.1._bn0 (BatchNorm2d(210, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=22
[6] prune_out_channels on backbone.blocks.2.1._bn0 (BatchNorm2d(210, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.2.1._expand_conv (Conv2d(40, 210, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=22
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.2.1._depthwise_conv
35
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True, False,
         True,  True])
torch.Size([232])
torch.Size([210])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.2.1._expand_conv
36
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True, False,
         True,  True])
torch.Size([232])
torch.Size([210])
backbone.blocks.2.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.1._project_conv (Conv2d(210, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.1._project_conv (Conv2d(210, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.2.1._project_conv
34
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([40])
torch.Size([40])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,372,234
Trainable params: 3,372,234
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.3.0._expand_conv
5

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.0._expand_conv (Conv2d(40, 235, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.0._expand_conv (Conv2d(40, 235, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
[1] prune_out_channels on backbone.blocks.3.0._expand_conv (Conv2d(40, 235, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.0._bn0 (BatchNorm2d(235, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[2] prune_out_channels on backbone.blocks.3.0._bn0 (BatchNorm2d(235, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_18(HardtanhBackward0), #idxs=5
[3] prune_out_channels on _ElementWiseOp_18(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.0._depthwise_conv (Conv2d(235, 235, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=235, bias=False)), #idxs=5
[4] prune_out_channels on backbone.blocks.3.0._depthwise_conv (Conv2d(235, 235, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=235, bias=False)) => prune_out_channels on backbone.blocks.3.0._bn1 (BatchNorm2d(235, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[5] prune_out_channels on backbone.blocks.3.0._bn1 (BatchNorm2d(235, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_17(HardtanhBackward0), #idxs=5
[6] prune_out_channels on _ElementWiseOp_17(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.0._project_conv (Conv2d(235, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.3.0._expand_conv
33
tensor([ True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([240])
torch.Size([235])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.3.0._depthwise_conv
32
tensor([ True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([240])
torch.Size([235])
backbone.blocks.3.0._depthwise_conv
0
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.0._depthwise_conv (Conv2d(235, 235, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=235, bias=False)) => prune_out_channels on backbone.blocks.3.0._depthwise_conv (Conv2d(235, 235, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=235, bias=False)), #idxs=0
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.3.0._depthwise_conv
32
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True])
torch.Size([235])
torch.Size([235])
backbone.blocks.3.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.0._project_conv (Conv2d(235, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.0._project_conv (Conv2d(235, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.3.0._project_conv
31
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True])
torch.Size([80])
torch.Size([80])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,371,569
Trainable params: 3,371,569
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.3.1._expand_conv
24

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.1._expand_conv (Conv2d(80, 456, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.1._expand_conv (Conv2d(80, 456, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=24
[1] prune_out_channels on backbone.blocks.3.1._expand_conv (Conv2d(80, 456, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.1._bn0 (BatchNorm2d(456, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=24
[2] prune_out_channels on backbone.blocks.3.1._bn0 (BatchNorm2d(456, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_32(HardtanhBackward0), #idxs=24
[3] prune_out_channels on _ElementWiseOp_32(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(456, 456, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=456, bias=False)), #idxs=24
[4] prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(456, 456, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=456, bias=False)) => prune_out_channels on backbone.blocks.3.1._bn1 (BatchNorm2d(456, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=24
[5] prune_out_channels on backbone.blocks.3.1._bn1 (BatchNorm2d(456, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_31(HardtanhBackward0), #idxs=24
[6] prune_out_channels on _ElementWiseOp_31(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.1._project_conv (Conv2d(456, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=24
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.3.1._expand_conv
30
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([456])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.3.1._depthwise_conv
29
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([456])
backbone.blocks.3.1._depthwise_conv
65
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(391, 391, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=391, bias=False)) => prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(391, 391, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=391, bias=False)), #idxs=65
[1] prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(391, 391, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=391, bias=False)) => prune_out_channels on _ElementWiseOp_32(HardtanhBackward0), #idxs=65
[2] prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(391, 391, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=391, bias=False)) => prune_out_channels on backbone.blocks.3.1._bn1 (BatchNorm2d(391, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=65
[3] prune_out_channels on backbone.blocks.3.1._bn1 (BatchNorm2d(391, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_31(HardtanhBackward0), #idxs=65
[4] prune_out_channels on _ElementWiseOp_31(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.1._project_conv (Conv2d(391, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=65
[5] prune_out_channels on _ElementWiseOp_32(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.1._bn0 (BatchNorm2d(391, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=65
[6] prune_out_channels on backbone.blocks.3.1._bn0 (BatchNorm2d(391, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.3.1._expand_conv (Conv2d(80, 391, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=65
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.3.1._depthwise_conv
29
tensor([ True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True, False, False,
         True, False,  True,  True,  True, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False, False,  True,  True,  True,  True, False,  True,
         True, False, False,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False, False,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
        False,  True,  True,  True, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
        False, False,  True,  True,  True,  True])
torch.Size([456])
torch.Size([391])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.3.1._expand_conv
30
tensor([ True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True, False, False,
         True, False,  True,  True,  True, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False, False,  True,  True,  True,  True, False,  True,
         True, False, False,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False, False,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
        False,  True,  True,  True, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
        False, False,  True,  True,  True,  True])
torch.Size([456])
torch.Size([391])
backbone.blocks.3.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.1._project_conv (Conv2d(391, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.1._project_conv (Conv2d(391, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.3.1._project_conv
28
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True])
torch.Size([80])
torch.Size([80])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,356,172
Trainable params: 3,356,172
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.3.2._expand_conv
18

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.2._expand_conv (Conv2d(80, 462, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.2._expand_conv (Conv2d(80, 462, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=18
[1] prune_out_channels on backbone.blocks.3.2._expand_conv (Conv2d(80, 462, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.2._bn0 (BatchNorm2d(462, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=18
[2] prune_out_channels on backbone.blocks.3.2._bn0 (BatchNorm2d(462, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_34(HardtanhBackward0), #idxs=18
[3] prune_out_channels on _ElementWiseOp_34(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(462, 462, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=462, bias=False)), #idxs=18
[4] prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(462, 462, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=462, bias=False)) => prune_out_channels on backbone.blocks.3.2._bn1 (BatchNorm2d(462, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=18
[5] prune_out_channels on backbone.blocks.3.2._bn1 (BatchNorm2d(462, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_33(HardtanhBackward0), #idxs=18
[6] prune_out_channels on _ElementWiseOp_33(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.2._project_conv (Conv2d(462, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=18
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.3.2._expand_conv
27
tensor([ True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([462])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.3.2._depthwise_conv
26
tensor([ True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([462])
backbone.blocks.3.2._depthwise_conv
98
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(364, 364, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=364, bias=False)) => prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(364, 364, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=364, bias=False)), #idxs=98
[1] prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(364, 364, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=364, bias=False)) => prune_out_channels on _ElementWiseOp_34(HardtanhBackward0), #idxs=98
[2] prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(364, 364, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=364, bias=False)) => prune_out_channels on backbone.blocks.3.2._bn1 (BatchNorm2d(364, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=98
[3] prune_out_channels on backbone.blocks.3.2._bn1 (BatchNorm2d(364, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_33(HardtanhBackward0), #idxs=98
[4] prune_out_channels on _ElementWiseOp_33(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.2._project_conv (Conv2d(364, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=98
[5] prune_out_channels on _ElementWiseOp_34(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.2._bn0 (BatchNorm2d(364, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=98
[6] prune_out_channels on backbone.blocks.3.2._bn0 (BatchNorm2d(364, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.3.2._expand_conv (Conv2d(80, 364, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=98
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.3.2._depthwise_conv
26
tensor([ True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True, False, False,  True,
         True,  True, False,  True,  True, False,  True, False,  True, False,
        False,  True,  True, False, False,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True, False, False,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True, False,  True, False,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False, False, False,  True,  True,  True,  True, False,  True, False,
        False,  True, False, False, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True, False,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True, False, False,  True,  True,  True,  True, False,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True, False,  True,  True,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True, False, False,
        False,  True,  True,  True, False,  True,  True,  True,  True, False,
         True,  True, False, False,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True, False, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True, False,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True, False,
         True,  True])
torch.Size([462])
torch.Size([364])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.3.2._expand_conv
27
tensor([ True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True, False, False,  True,
         True,  True, False,  True,  True, False,  True, False,  True, False,
        False,  True,  True, False, False,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True, False, False,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True, False,  True, False,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False, False, False,  True,  True,  True,  True, False,  True, False,
        False,  True, False, False, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True, False,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True, False, False,  True,  True,  True,  True, False,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True, False,  True,  True,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True, False, False,
        False,  True,  True,  True, False,  True,  True,  True,  True, False,
         True,  True, False, False,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True, False, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True, False,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True, False,
         True,  True])
torch.Size([462])
torch.Size([364])
backbone.blocks.3.2._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.2._project_conv (Conv2d(364, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.2._project_conv (Conv2d(364, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.3.2._project_conv
25
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True])
torch.Size([80])
torch.Size([80])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,336,104
Trainable params: 3,336,104
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.4.0._expand_conv
8

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.0._expand_conv (Conv2d(80, 472, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.0._expand_conv (Conv2d(80, 472, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
[1] prune_out_channels on backbone.blocks.4.0._expand_conv (Conv2d(80, 472, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.0._bn0 (BatchNorm2d(472, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[2] prune_out_channels on backbone.blocks.4.0._bn0 (BatchNorm2d(472, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_14(HardtanhBackward0), #idxs=8
[3] prune_out_channels on _ElementWiseOp_14(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(472, 472, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=472, bias=False)), #idxs=8
[4] prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(472, 472, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=472, bias=False)) => prune_out_channels on backbone.blocks.4.0._bn1 (BatchNorm2d(472, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[5] prune_out_channels on backbone.blocks.4.0._bn1 (BatchNorm2d(472, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_13(HardtanhBackward0), #idxs=8
[6] prune_out_channels on _ElementWiseOp_13(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.0._project_conv (Conv2d(472, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.0._expand_conv
24
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([472])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.4.0._depthwise_conv
23
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([472])
backbone.blocks.4.0._depthwise_conv
10
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(462, 462, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=462, bias=False)) => prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(462, 462, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=462, bias=False)), #idxs=10
[1] prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(462, 462, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=462, bias=False)) => prune_out_channels on _ElementWiseOp_14(HardtanhBackward0), #idxs=10
[2] prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(462, 462, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=462, bias=False)) => prune_out_channels on backbone.blocks.4.0._bn1 (BatchNorm2d(462, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=10
[3] prune_out_channels on backbone.blocks.4.0._bn1 (BatchNorm2d(462, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_13(HardtanhBackward0), #idxs=10
[4] prune_out_channels on _ElementWiseOp_13(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.0._project_conv (Conv2d(462, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=10
[5] prune_out_channels on _ElementWiseOp_14(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.0._bn0 (BatchNorm2d(462, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=10
[6] prune_out_channels on backbone.blocks.4.0._bn0 (BatchNorm2d(462, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.4.0._expand_conv (Conv2d(80, 462, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=10
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.4.0._depthwise_conv
23
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True])
torch.Size([472])
torch.Size([462])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.0._expand_conv
24
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True])
torch.Size([472])
torch.Size([462])
backbone.blocks.4.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.0._project_conv (Conv2d(462, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.0._project_conv (Conv2d(462, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.0._project_conv
22
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([112])
torch.Size([112])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,332,126
Trainable params: 3,332,126
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.4.1._expand_conv
52

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.1._expand_conv (Conv2d(112, 620, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.1._expand_conv (Conv2d(112, 620, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=52
[1] prune_out_channels on backbone.blocks.4.1._expand_conv (Conv2d(112, 620, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.1._bn0 (BatchNorm2d(620, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=52
[2] prune_out_channels on backbone.blocks.4.1._bn0 (BatchNorm2d(620, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_36(HardtanhBackward0), #idxs=52
[3] prune_out_channels on _ElementWiseOp_36(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(620, 620, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=620, bias=False)), #idxs=52
[4] prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(620, 620, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=620, bias=False)) => prune_out_channels on backbone.blocks.4.1._bn1 (BatchNorm2d(620, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=52
[5] prune_out_channels on backbone.blocks.4.1._bn1 (BatchNorm2d(620, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_35(HardtanhBackward0), #idxs=52
[6] prune_out_channels on _ElementWiseOp_35(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.1._project_conv (Conv2d(620, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=52
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.1._expand_conv
21
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False])
torch.Size([672])
torch.Size([620])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.4.1._depthwise_conv
20
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False])
torch.Size([672])
torch.Size([620])
backbone.blocks.4.1._depthwise_conv
116
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(504, 504, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=504, bias=False)) => prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(504, 504, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=504, bias=False)), #idxs=116
[1] prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(504, 504, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=504, bias=False)) => prune_out_channels on _ElementWiseOp_36(HardtanhBackward0), #idxs=116
[2] prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(504, 504, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=504, bias=False)) => prune_out_channels on backbone.blocks.4.1._bn1 (BatchNorm2d(504, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=116
[3] prune_out_channels on backbone.blocks.4.1._bn1 (BatchNorm2d(504, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_35(HardtanhBackward0), #idxs=116
[4] prune_out_channels on _ElementWiseOp_35(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.1._project_conv (Conv2d(504, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=116
[5] prune_out_channels on _ElementWiseOp_36(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.1._bn0 (BatchNorm2d(504, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=116
[6] prune_out_channels on backbone.blocks.4.1._bn0 (BatchNorm2d(504, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.4.1._expand_conv (Conv2d(112, 504, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=116
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.4.1._depthwise_conv
20
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True,  True, False,  True, False,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True, False,
         True, False,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True, False, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True, False, False,  True, False,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
         True,  True,  True, False, False,  True,  True,  True,  True, False,
         True, False,  True,  True,  True,  True, False,  True, False,  True,
        False,  True, False,  True, False, False,  True,  True,  True,  True,
         True, False,  True, False, False,  True,  True,  True, False,  True,
         True, False,  True,  True, False,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
        False,  True, False,  True,  True,  True, False,  True, False, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True, False, False,  True,  True,
        False,  True, False,  True,  True,  True,  True, False,  True, False,
         True, False, False,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True])
torch.Size([620])
torch.Size([504])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.1._expand_conv
21
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True,  True, False,  True, False,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True, False,
         True, False,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True, False, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True, False, False,  True, False,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
         True,  True,  True, False, False,  True,  True,  True,  True, False,
         True, False,  True,  True,  True,  True, False,  True, False,  True,
        False,  True, False,  True, False, False,  True,  True,  True,  True,
         True, False,  True, False, False,  True,  True,  True, False,  True,
         True, False,  True,  True, False,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
        False,  True, False,  True,  True,  True, False,  True, False, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True, False, False,  True,  True,
        False,  True, False,  True,  True,  True,  True, False,  True, False,
         True, False, False,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True])
torch.Size([620])
torch.Size([504])
backbone.blocks.4.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.1._project_conv (Conv2d(504, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.1._project_conv (Conv2d(504, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.1._project_conv
19
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([112])
torch.Size([112])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 504, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 504, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 504, 10, 10]          12,600          12,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,289,622
Trainable params: 3,289,622
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.4.2._expand_conv
90

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.2._expand_conv (Conv2d(112, 582, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.2._expand_conv (Conv2d(112, 582, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=90
[1] prune_out_channels on backbone.blocks.4.2._expand_conv (Conv2d(112, 582, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.2._bn0 (BatchNorm2d(582, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=90
[2] prune_out_channels on backbone.blocks.4.2._bn0 (BatchNorm2d(582, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_38(HardtanhBackward0), #idxs=90
[3] prune_out_channels on _ElementWiseOp_38(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(582, 582, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=582, bias=False)), #idxs=90
[4] prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(582, 582, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=582, bias=False)) => prune_out_channels on backbone.blocks.4.2._bn1 (BatchNorm2d(582, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=90
[5] prune_out_channels on backbone.blocks.4.2._bn1 (BatchNorm2d(582, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_37(HardtanhBackward0), #idxs=90
[6] prune_out_channels on _ElementWiseOp_37(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.2._project_conv (Conv2d(582, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=90
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.2._expand_conv
18
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True,  True, False,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True, False,  True,
        False,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True, False, False,  True, False,  True, False,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True, False,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True, False])
torch.Size([672])
torch.Size([582])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.4.2._depthwise_conv
17
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True,  True, False,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True, False,  True,
        False,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True, False, False,  True, False,  True, False,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True, False,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True, False])
torch.Size([672])
torch.Size([582])
backbone.blocks.4.2._depthwise_conv
172
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(410, 410, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=410, bias=False)) => prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(410, 410, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=410, bias=False)), #idxs=172
[1] prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(410, 410, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=410, bias=False)) => prune_out_channels on _ElementWiseOp_38(HardtanhBackward0), #idxs=172
[2] prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(410, 410, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=410, bias=False)) => prune_out_channels on backbone.blocks.4.2._bn1 (BatchNorm2d(410, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=172
[3] prune_out_channels on backbone.blocks.4.2._bn1 (BatchNorm2d(410, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_37(HardtanhBackward0), #idxs=172
[4] prune_out_channels on _ElementWiseOp_37(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.2._project_conv (Conv2d(410, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=172
[5] prune_out_channels on _ElementWiseOp_38(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.2._bn0 (BatchNorm2d(410, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=172
[6] prune_out_channels on backbone.blocks.4.2._bn0 (BatchNorm2d(410, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.4.2._expand_conv (Conv2d(112, 410, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=172
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.4.2._depthwise_conv
17
tensor([False,  True,  True, False, False,  True,  True,  True,  True,  True,
        False,  True,  True, False, False,  True, False, False,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True, False,  True, False, False,  True,  True,  True, False,
        False,  True,  True,  True, False,  True, False,  True, False,  True,
         True,  True, False, False, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False, False, False,  True,
         True,  True,  True, False,  True,  True, False, False, False,  True,
        False,  True, False,  True,  True, False,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True, False,  True, False, False,
        False, False,  True,  True,  True, False,  True, False,  True,  True,
         True,  True, False,  True,  True, False, False,  True, False,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True, False,
         True, False, False,  True,  True, False, False,  True, False,  True,
        False, False,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True, False,  True, False, False,  True,  True, False,
         True, False, False, False,  True,  True, False,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
        False,  True, False,  True,  True, False,  True,  True, False,  True,
         True, False,  True, False,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False, False, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True, False,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True, False,  True, False,  True, False,  True, False,  True,
         True,  True, False,  True,  True, False,  True,  True, False,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True, False, False,  True, False,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True, False, False, False, False, False,  True,  True,
         True, False,  True, False,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True, False, False, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False, False,  True,  True,  True, False,  True, False,  True,  True,
         True, False,  True,  True, False,  True, False,  True,  True,  True,
         True,  True, False, False, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True, False,  True,  True, False,
         True,  True, False,  True, False,  True, False, False, False,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True, False,  True, False,  True,
        False,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True, False, False, False,  True,
         True,  True])
torch.Size([582])
torch.Size([410])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.2._expand_conv
18
tensor([False,  True,  True, False, False,  True,  True,  True,  True,  True,
        False,  True,  True, False, False,  True, False, False,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True, False,  True, False, False,  True,  True,  True, False,
        False,  True,  True,  True, False,  True, False,  True, False,  True,
         True,  True, False, False, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False, False, False,  True,
         True,  True,  True, False,  True,  True, False, False, False,  True,
        False,  True, False,  True,  True, False,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True, False,  True, False, False,
        False, False,  True,  True,  True, False,  True, False,  True,  True,
         True,  True, False,  True,  True, False, False,  True, False,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True, False,
         True, False, False,  True,  True, False, False,  True, False,  True,
        False, False,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True, False,  True, False, False,  True,  True, False,
         True, False, False, False,  True,  True, False,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
        False,  True, False,  True,  True, False,  True,  True, False,  True,
         True, False,  True, False,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False, False, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True, False,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True, False,  True, False,  True, False,  True, False,  True,
         True,  True, False,  True,  True, False,  True,  True, False,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True, False, False,  True, False,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True, False, False, False, False, False,  True,  True,
         True, False,  True, False,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True, False, False, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False, False,  True,  True,  True, False,  True, False,  True,  True,
         True, False,  True,  True, False,  True, False,  True,  True,  True,
         True,  True, False, False, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True, False,  True,  True, False,
         True,  True, False,  True, False,  True, False, False, False,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True, False,  True, False,  True,
        False,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True, False, False, False,  True,
         True,  True])
torch.Size([582])
torch.Size([410])
backbone.blocks.4.2._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.2._project_conv (Conv2d(410, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.2._project_conv (Conv2d(410, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.4.2._project_conv
16
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([112])
torch.Size([112])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 504, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 504, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 504, 10, 10]          12,600          12,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 410, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 410, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 410, 10, 10]          10,250          10,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,223,336
Trainable params: 3,223,336
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.5.0._expand_conv
187

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.0._expand_conv (Conv2d(112, 485, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.0._expand_conv (Conv2d(112, 485, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=187
[1] prune_out_channels on backbone.blocks.5.0._expand_conv (Conv2d(112, 485, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.0._bn0 (BatchNorm2d(485, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=187
[2] prune_out_channels on backbone.blocks.5.0._bn0 (BatchNorm2d(485, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_10(HardtanhBackward0), #idxs=187
[3] prune_out_channels on _ElementWiseOp_10(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(485, 485, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=485, bias=False)), #idxs=187
[4] prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(485, 485, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=485, bias=False)) => prune_out_channels on backbone.blocks.5.0._bn1 (BatchNorm2d(485, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=187
[5] prune_out_channels on backbone.blocks.5.0._bn1 (BatchNorm2d(485, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_9(HardtanhBackward0), #idxs=187
[6] prune_out_channels on _ElementWiseOp_9(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.0._project_conv (Conv2d(485, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=187
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.0._expand_conv
15
tensor([False,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True, False,  True, False, False,  True,
         True,  True, False, False, False, False,  True,  True,  True,  True,
         True,  True, False, False, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True, False,  True,  True, False, False,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True, False,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True, False, False,
         True,  True, False,  True, False,  True, False,  True, False,  True,
         True,  True, False, False,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
        False,  True, False,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True, False, False,  True, False,  True,
         True,  True, False,  True, False,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
        False, False,  True,  True,  True,  True, False,  True, False,  True,
         True, False, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True, False, False,  True,  True, False,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False, False,  True,  True, False,  True,  True,
         True, False, False, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True,  True, False,  True,  True, False,
         True, False, False,  True,  True,  True, False,  True, False,  True,
        False,  True, False,  True, False, False,  True,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True, False,  True, False,  True,  True,
         True, False,  True, False, False,  True,  True,  True, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True, False, False,  True,  True, False,  True, False,  True,
        False,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
         True,  True, False,  True,  True, False, False, False,  True, False,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
        False,  True, False,  True,  True, False, False,  True,  True, False,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True, False,  True,  True, False,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True, False, False, False,  True,  True, False, False,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
        False, False, False, False, False,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True, False, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True, False,  True, False, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True, False,  True,  True, False,
         True,  True])
torch.Size([672])
torch.Size([485])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.5.0._depthwise_conv
14
tensor([False,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True, False,  True, False, False,  True,
         True,  True, False, False, False, False,  True,  True,  True,  True,
         True,  True, False, False, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True, False,  True,  True, False, False,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True, False,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True, False, False,
         True,  True, False,  True, False,  True, False,  True, False,  True,
         True,  True, False, False,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
        False,  True, False,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True, False, False,  True, False,  True,
         True,  True, False,  True, False,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
        False, False,  True,  True,  True,  True, False,  True, False,  True,
         True, False, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True, False, False,  True,  True, False,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False, False,  True,  True, False,  True,  True,
         True, False, False, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True,  True, False,  True,  True, False,
         True, False, False,  True,  True,  True, False,  True, False,  True,
        False,  True, False,  True, False, False,  True,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True, False,  True, False,  True,  True,
         True, False,  True, False, False,  True,  True,  True, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True, False, False,  True,  True, False,  True, False,  True,
        False,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
         True,  True, False,  True,  True, False, False, False,  True, False,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
        False,  True, False,  True,  True, False, False,  True,  True, False,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True, False,  True,  True, False,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True, False, False, False,  True,  True, False, False,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
        False, False, False, False, False,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True, False, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True, False,  True, False, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True, False,  True,  True, False,
         True,  True])
torch.Size([672])
torch.Size([485])
backbone.blocks.5.0._depthwise_conv
8
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=477, bias=False)), #idxs=8
[1] prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on _ElementWiseOp_10(HardtanhBackward0), #idxs=8
[2] prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on backbone.blocks.5.0._bn1 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[3] prune_out_channels on backbone.blocks.5.0._bn1 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_9(HardtanhBackward0), #idxs=8
[4] prune_out_channels on _ElementWiseOp_9(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.0._project_conv (Conv2d(477, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
[5] prune_out_channels on _ElementWiseOp_10(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.0._bn0 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[6] prune_out_channels on backbone.blocks.5.0._bn0 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.5.0._expand_conv (Conv2d(112, 477, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.5.0._depthwise_conv
14
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True])
torch.Size([485])
torch.Size([477])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.0._expand_conv
15
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True])
torch.Size([485])
torch.Size([477])
backbone.blocks.5.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.0._project_conv (Conv2d(477, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.0._project_conv (Conv2d(477, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.0._project_conv
13
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([192])
torch.Size([192])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 504, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 504, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 504, 10, 10]          12,600          12,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 410, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 410, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 410, 10, 10]          10,250          10,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 477, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,158,401
Trainable params: 3,158,401
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.5.1._expand_conv
154

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.1._expand_conv (Conv2d(192, 998, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.1._expand_conv (Conv2d(192, 998, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=154
[1] prune_out_channels on backbone.blocks.5.1._expand_conv (Conv2d(192, 998, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.1._bn0 (BatchNorm2d(998, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=154
[2] prune_out_channels on backbone.blocks.5.1._bn0 (BatchNorm2d(998, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_40(HardtanhBackward0), #idxs=154
[3] prune_out_channels on _ElementWiseOp_40(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(998, 998, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=998, bias=False)), #idxs=154
[4] prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(998, 998, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=998, bias=False)) => prune_out_channels on backbone.blocks.5.1._bn1 (BatchNorm2d(998, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=154
[5] prune_out_channels on backbone.blocks.5.1._bn1 (BatchNorm2d(998, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_39(HardtanhBackward0), #idxs=154
[6] prune_out_channels on _ElementWiseOp_39(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.1._project_conv (Conv2d(998, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=154
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.1._expand_conv
12
tensor([False,  True, False,  ...,  True,  True,  True])
torch.Size([1152])
torch.Size([998])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.5.1._depthwise_conv
11
tensor([False,  True, False,  ...,  True,  True,  True])
torch.Size([1152])
torch.Size([998])
backbone.blocks.5.1._depthwise_conv
253
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(745, 745, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=745, bias=False)) => prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(745, 745, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=745, bias=False)), #idxs=253
[1] prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(745, 745, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=745, bias=False)) => prune_out_channels on _ElementWiseOp_40(HardtanhBackward0), #idxs=253
[2] prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(745, 745, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=745, bias=False)) => prune_out_channels on backbone.blocks.5.1._bn1 (BatchNorm2d(745, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=253
[3] prune_out_channels on backbone.blocks.5.1._bn1 (BatchNorm2d(745, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_39(HardtanhBackward0), #idxs=253
[4] prune_out_channels on _ElementWiseOp_39(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.1._project_conv (Conv2d(745, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=253
[5] prune_out_channels on _ElementWiseOp_40(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.1._bn0 (BatchNorm2d(745, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=253
[6] prune_out_channels on backbone.blocks.5.1._bn0 (BatchNorm2d(745, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.5.1._expand_conv (Conv2d(192, 745, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=253
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.5.1._depthwise_conv
11
tensor([ True,  True,  True,  True,  True,  True, False, False,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False, False, False, False,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True, False,  True,  True,  True,  True, False, False,  True, False,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True, False, False,  True, False,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False, False, False,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True, False, False,  True,
        False, False, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True,  True, False,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True, False,
         True,  True, False,  True, False,  True,  True,  True, False,  True,
         True,  True, False, False, False,  True, False,  True, False,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True, False,  True,  True, False,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False, False,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True, False,
        False,  True,  True, False,  True,  True,  True, False, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True, False, False,  True,  True,  True,
        False,  True,  True,  True, False, False,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False, False, False,
         True,  True,  True,  True,  True, False,  True,  True, False,  True,
         True, False, False, False, False,  True, False,  True, False, False,
        False, False, False,  True, False, False,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True, False,  True,  True, False, False, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True, False,
         True, False, False,  True,  True,  True,  True,  True, False,  True,
        False, False,  True, False,  True,  True,  True,  True, False, False,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True, False, False,  True, False,  True,
        False, False,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True, False, False,  True,  True, False, False,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True, False,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
        False, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False, False, False, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True, False,  True,  True, False,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False, False,  True, False,  True,  True, False,  True, False,  True,
         True,  True, False,  True,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False, False,  True,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
        False, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True, False,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True, False, False,  True, False,  True,  True, False,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True, False,  True,  True, False, False,  True,  True, False,
        False,  True,  True,  True,  True, False,  True,  True, False,  True,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
        False, False,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False, False])
torch.Size([998])
torch.Size([745])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.1._expand_conv
12
tensor([ True,  True,  True,  True,  True,  True, False, False,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False, False, False, False,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True, False,  True,  True,  True,  True, False, False,  True, False,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True, False, False,  True, False,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False, False, False,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True, False, False,  True,
        False, False, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True,  True, False,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True, False,
         True,  True, False,  True, False,  True,  True,  True, False,  True,
         True,  True, False, False, False,  True, False,  True, False,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True, False,  True,  True, False,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False, False,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True, False,
        False,  True,  True, False,  True,  True,  True, False, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True, False, False,  True,  True,  True,
        False,  True,  True,  True, False, False,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False, False, False,
         True,  True,  True,  True,  True, False,  True,  True, False,  True,
         True, False, False, False, False,  True, False,  True, False, False,
        False, False, False,  True, False, False,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True, False,  True,  True, False, False, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True, False,
         True, False, False,  True,  True,  True,  True,  True, False,  True,
        False, False,  True, False,  True,  True,  True,  True, False, False,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True, False, False,  True, False,  True,
        False, False,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True, False, False,  True,  True, False, False,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True, False,  True,
         True, False,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
        False, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False, False, False, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True, False,  True,  True, False,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False, False,  True, False,  True,  True, False,  True, False,  True,
         True,  True, False,  True,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False, False,  True,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
        False, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True, False,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True, False, False,  True, False,  True,  True, False,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True, False,  True,  True, False, False,  True,  True, False,
        False,  True,  True,  True,  True, False,  True,  True, False,  True,
         True,  True, False, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
        False, False,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False, False])
torch.Size([998])
torch.Size([745])
backbone.blocks.5.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.1._project_conv (Conv2d(745, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.1._project_conv (Conv2d(745, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.1._project_conv
10
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([192])
torch.Size([192])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 504, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 504, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 504, 10, 10]          12,600          12,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 410, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 410, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 410, 10, 10]          10,250          10,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 477, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 745, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 745, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 745, 5, 5]          18,625          18,625
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 2,990,310
Trainable params: 2,990,310
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.5.2._expand_conv
317

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.2._expand_conv (Conv2d(192, 835, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.2._expand_conv (Conv2d(192, 835, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=317
[1] prune_out_channels on backbone.blocks.5.2._expand_conv (Conv2d(192, 835, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.2._bn0 (BatchNorm2d(835, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=317
[2] prune_out_channels on backbone.blocks.5.2._bn0 (BatchNorm2d(835, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_42(HardtanhBackward0), #idxs=317
[3] prune_out_channels on _ElementWiseOp_42(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(835, 835, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=835, bias=False)), #idxs=317
[4] prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(835, 835, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=835, bias=False)) => prune_out_channels on backbone.blocks.5.2._bn1 (BatchNorm2d(835, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=317
[5] prune_out_channels on backbone.blocks.5.2._bn1 (BatchNorm2d(835, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_41(HardtanhBackward0), #idxs=317
[6] prune_out_channels on _ElementWiseOp_41(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.2._project_conv (Conv2d(835, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=317
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.2._expand_conv
9
tensor([ True,  True, False,  ..., False, False,  True])
torch.Size([1152])
torch.Size([835])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.5.2._depthwise_conv
8
tensor([ True,  True, False,  ..., False, False,  True])
torch.Size([1152])
torch.Size([835])
backbone.blocks.5.2._depthwise_conv
358
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=477, bias=False)), #idxs=358
[1] prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on _ElementWiseOp_42(HardtanhBackward0), #idxs=358
[2] prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on backbone.blocks.5.2._bn1 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=358
[3] prune_out_channels on backbone.blocks.5.2._bn1 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_41(HardtanhBackward0), #idxs=358
[4] prune_out_channels on _ElementWiseOp_41(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.2._project_conv (Conv2d(477, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=358
[5] prune_out_channels on _ElementWiseOp_42(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.2._bn0 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=358
[6] prune_out_channels on backbone.blocks.5.2._bn0 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.5.2._expand_conv (Conv2d(192, 477, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=358
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.5.2._depthwise_conv
8
tensor([False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True, False,  True,  True,
        False,  True, False,  True,  True, False,  True, False, False,  True,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
        False,  True, False,  True, False,  True,  True,  True, False,  True,
        False,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True, False, False,  True, False,  True, False,
         True,  True,  True, False,  True,  True, False,  True,  True, False,
        False,  True,  True,  True, False,  True, False, False,  True,  True,
         True,  True,  True, False,  True,  True,  True, False, False, False,
        False, False, False,  True, False,  True, False,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True, False, False,
         True, False,  True, False,  True,  True, False, False, False, False,
        False, False,  True,  True, False,  True, False,  True,  True,  True,
         True, False,  True, False, False,  True, False,  True, False,  True,
         True,  True, False,  True,  True, False, False,  True,  True,  True,
         True, False, False,  True,  True,  True, False, False, False, False,
        False, False,  True, False,  True,  True, False,  True,  True,  True,
         True, False,  True, False,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True, False, False,  True,  True, False, False, False,  True,  True,
        False, False, False, False, False, False, False,  True,  True, False,
         True, False,  True, False, False,  True,  True, False, False, False,
         True,  True,  True, False, False,  True,  True,  True,  True, False,
        False,  True,  True,  True,  True, False, False, False, False, False,
         True, False,  True,  True, False,  True,  True, False,  True, False,
        False, False, False, False,  True,  True,  True, False,  True, False,
        False, False,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True, False,  True,  True, False, False,  True, False,  True, False,
        False,  True, False, False, False, False, False,  True,  True,  True,
        False, False,  True,  True, False,  True, False,  True, False, False,
         True, False,  True, False,  True,  True, False,  True,  True, False,
         True, False,  True,  True, False,  True, False,  True, False,  True,
         True,  True, False, False,  True,  True, False, False, False,  True,
        False,  True,  True,  True, False,  True,  True,  True, False,  True,
        False,  True, False, False,  True,  True, False, False,  True, False,
        False,  True,  True, False,  True, False,  True, False,  True, False,
        False,  True,  True,  True,  True,  True,  True, False, False,  True,
        False,  True,  True,  True, False,  True, False, False, False, False,
        False,  True,  True,  True,  True,  True, False,  True, False, False,
        False,  True,  True, False, False, False,  True, False, False,  True,
         True, False,  True,  True, False,  True, False,  True,  True,  True,
         True,  True,  True,  True, False, False,  True, False,  True,  True,
         True, False,  True,  True, False,  True,  True, False,  True,  True,
        False,  True, False, False,  True,  True, False,  True,  True, False,
         True,  True, False,  True,  True, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True, False, False, False, False,
        False,  True,  True,  True, False, False, False,  True, False,  True,
         True, False, False, False,  True, False,  True,  True,  True,  True,
         True,  True, False, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True, False,  True,  True, False,
         True, False, False, False,  True, False, False, False,  True,  True,
        False,  True, False,  True,  True,  True,  True, False,  True, False,
         True, False, False,  True,  True, False,  True, False, False,  True,
        False, False, False, False,  True,  True,  True,  True, False, False,
        False, False,  True, False,  True, False, False, False,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True,  True, False, False,  True,  True, False,  True,
        False,  True,  True, False, False,  True,  True,  True, False,  True,
        False, False, False,  True, False,  True,  True, False, False, False,
        False,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True, False, False,  True, False, False, False,  True,  True, False,
         True,  True, False, False, False,  True,  True, False, False,  True,
         True,  True,  True, False,  True,  True, False, False,  True,  True,
        False,  True,  True, False, False,  True,  True, False, False, False,
         True, False, False, False,  True, False,  True,  True, False, False,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True, False,  True,  True, False,  True,  True, False,
        False, False,  True,  True, False,  True, False,  True, False,  True,
         True,  True,  True, False, False,  True,  True, False,  True, False,
         True, False,  True,  True, False, False,  True, False, False,  True,
         True, False, False, False,  True,  True, False, False, False,  True,
         True,  True, False,  True, False,  True, False, False,  True, False,
         True, False, False,  True, False,  True,  True, False, False, False,
        False,  True,  True, False,  True,  True,  True, False,  True, False,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True, False, False,  True,
        False, False,  True, False,  True, False, False,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True])
torch.Size([835])
torch.Size([477])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.2._expand_conv
9
tensor([False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True, False,  True,  True,
        False,  True, False,  True,  True, False,  True, False, False,  True,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
        False,  True, False,  True, False,  True,  True,  True, False,  True,
        False,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True, False, False,  True, False,  True, False,
         True,  True,  True, False,  True,  True, False,  True,  True, False,
        False,  True,  True,  True, False,  True, False, False,  True,  True,
         True,  True,  True, False,  True,  True,  True, False, False, False,
        False, False, False,  True, False,  True, False,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True, False, False,
         True, False,  True, False,  True,  True, False, False, False, False,
        False, False,  True,  True, False,  True, False,  True,  True,  True,
         True, False,  True, False, False,  True, False,  True, False,  True,
         True,  True, False,  True,  True, False, False,  True,  True,  True,
         True, False, False,  True,  True,  True, False, False, False, False,
        False, False,  True, False,  True,  True, False,  True,  True,  True,
         True, False,  True, False,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True, False, False,  True,  True, False, False, False,  True,  True,
        False, False, False, False, False, False, False,  True,  True, False,
         True, False,  True, False, False,  True,  True, False, False, False,
         True,  True,  True, False, False,  True,  True,  True,  True, False,
        False,  True,  True,  True,  True, False, False, False, False, False,
         True, False,  True,  True, False,  True,  True, False,  True, False,
        False, False, False, False,  True,  True,  True, False,  True, False,
        False, False,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True, False,  True,  True, False, False,  True, False,  True, False,
        False,  True, False, False, False, False, False,  True,  True,  True,
        False, False,  True,  True, False,  True, False,  True, False, False,
         True, False,  True, False,  True,  True, False,  True,  True, False,
         True, False,  True,  True, False,  True, False,  True, False,  True,
         True,  True, False, False,  True,  True, False, False, False,  True,
        False,  True,  True,  True, False,  True,  True,  True, False,  True,
        False,  True, False, False,  True,  True, False, False,  True, False,
        False,  True,  True, False,  True, False,  True, False,  True, False,
        False,  True,  True,  True,  True,  True,  True, False, False,  True,
        False,  True,  True,  True, False,  True, False, False, False, False,
        False,  True,  True,  True,  True,  True, False,  True, False, False,
        False,  True,  True, False, False, False,  True, False, False,  True,
         True, False,  True,  True, False,  True, False,  True,  True,  True,
         True,  True,  True,  True, False, False,  True, False,  True,  True,
         True, False,  True,  True, False,  True,  True, False,  True,  True,
        False,  True, False, False,  True,  True, False,  True,  True, False,
         True,  True, False,  True,  True, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True, False, False, False, False,
        False,  True,  True,  True, False, False, False,  True, False,  True,
         True, False, False, False,  True, False,  True,  True,  True,  True,
         True,  True, False, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True, False,  True,  True, False,
         True, False, False, False,  True, False, False, False,  True,  True,
        False,  True, False,  True,  True,  True,  True, False,  True, False,
         True, False, False,  True,  True, False,  True, False, False,  True,
        False, False, False, False,  True,  True,  True,  True, False, False,
        False, False,  True, False,  True, False, False, False,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True,  True, False, False,  True,  True, False,  True,
        False,  True,  True, False, False,  True,  True,  True, False,  True,
        False, False, False,  True, False,  True,  True, False, False, False,
        False,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True, False, False,  True, False, False, False,  True,  True, False,
         True,  True, False, False, False,  True,  True, False, False,  True,
         True,  True,  True, False,  True,  True, False, False,  True,  True,
        False,  True,  True, False, False,  True,  True, False, False, False,
         True, False, False, False,  True, False,  True,  True, False, False,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True, False,  True,  True, False,  True,  True, False,
        False, False,  True,  True, False,  True, False,  True, False,  True,
         True,  True,  True, False, False,  True,  True, False,  True, False,
         True, False,  True,  True, False, False,  True, False, False,  True,
         True, False, False, False,  True,  True, False, False, False,  True,
         True,  True, False,  True, False,  True, False, False,  True, False,
         True, False, False,  True, False,  True,  True, False, False, False,
        False,  True,  True, False,  True,  True,  True, False,  True, False,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True, False, False,  True,
        False, False,  True, False,  True, False, False,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True])
torch.Size([835])
torch.Size([477])
backbone.blocks.5.2._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.2._project_conv (Conv2d(477, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.2._project_conv (Conv2d(477, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.2._project_conv
7
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([192])
torch.Size([192])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 504, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 504, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 504, 10, 10]          12,600          12,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 410, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 410, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 410, 10, 10]          10,250          10,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 477, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 745, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 745, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 745, 5, 5]          18,625          18,625
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93       [1, 477, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95       [1, 477, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 2,711,535
Trainable params: 2,711,535
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.5.3._expand_conv
455

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.3._expand_conv (Conv2d(192, 697, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.3._expand_conv (Conv2d(192, 697, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=455
[1] prune_out_channels on backbone.blocks.5.3._expand_conv (Conv2d(192, 697, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.3._bn0 (BatchNorm2d(697, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=455
[2] prune_out_channels on backbone.blocks.5.3._bn0 (BatchNorm2d(697, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_44(HardtanhBackward0), #idxs=455
[3] prune_out_channels on _ElementWiseOp_44(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(697, 697, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=697, bias=False)), #idxs=455
[4] prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(697, 697, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=697, bias=False)) => prune_out_channels on backbone.blocks.5.3._bn1 (BatchNorm2d(697, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=455
[5] prune_out_channels on backbone.blocks.5.3._bn1 (BatchNorm2d(697, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_43(HardtanhBackward0), #idxs=455
[6] prune_out_channels on _ElementWiseOp_43(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.3._project_conv (Conv2d(697, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=455
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.3._expand_conv
6
tensor([ True, False,  True,  ...,  True, False, False])
torch.Size([1152])
torch.Size([697])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.5.3._depthwise_conv
5
tensor([ True, False,  True,  ...,  True, False, False])
torch.Size([1152])
torch.Size([697])
backbone.blocks.5.3._depthwise_conv
340
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(357, 357, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=357, bias=False)) => prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(357, 357, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=357, bias=False)), #idxs=340
[1] prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(357, 357, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=357, bias=False)) => prune_out_channels on _ElementWiseOp_44(HardtanhBackward0), #idxs=340
[2] prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(357, 357, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=357, bias=False)) => prune_out_channels on backbone.blocks.5.3._bn1 (BatchNorm2d(357, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=340
[3] prune_out_channels on backbone.blocks.5.3._bn1 (BatchNorm2d(357, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_43(HardtanhBackward0), #idxs=340
[4] prune_out_channels on _ElementWiseOp_43(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.3._project_conv (Conv2d(357, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=340
[5] prune_out_channels on _ElementWiseOp_44(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.3._bn0 (BatchNorm2d(357, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=340
[6] prune_out_channels on backbone.blocks.5.3._bn0 (BatchNorm2d(357, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.5.3._expand_conv (Conv2d(192, 357, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=340
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.5.3._depthwise_conv
5
tensor([False, False, False, False,  True,  True,  True,  True,  True,  True,
        False,  True, False, False,  True,  True,  True,  True,  True, False,
        False,  True,  True, False,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True, False, False, False,  True,  True,  True,
        False,  True,  True, False, False, False,  True, False, False,  True,
         True,  True, False,  True, False, False, False,  True, False,  True,
         True, False,  True, False, False, False, False,  True,  True, False,
        False,  True,  True,  True,  True,  True,  True, False, False, False,
        False,  True, False,  True, False, False, False,  True, False, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True, False,  True, False, False,  True,  True, False, False,  True,
         True, False, False,  True, False, False,  True, False,  True, False,
        False,  True, False,  True,  True,  True, False, False, False,  True,
        False,  True, False, False,  True,  True,  True,  True, False,  True,
        False, False, False,  True, False,  True, False, False, False,  True,
         True, False, False,  True,  True, False, False,  True, False, False,
        False,  True, False,  True, False,  True,  True, False, False,  True,
         True,  True, False,  True, False, False,  True,  True, False, False,
         True,  True, False,  True,  True,  True, False, False, False, False,
        False,  True, False,  True, False,  True,  True,  True, False,  True,
        False, False,  True,  True,  True, False, False, False, False, False,
         True, False,  True, False,  True, False,  True, False,  True, False,
        False,  True, False, False, False,  True, False, False, False,  True,
         True, False, False, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True,  True,  True, False,  True, False,
         True,  True, False,  True, False,  True, False, False, False, False,
        False,  True, False,  True,  True, False,  True,  True, False,  True,
         True, False, False, False,  True,  True,  True,  True, False,  True,
        False, False, False, False, False, False, False, False, False,  True,
        False, False, False, False, False, False, False, False,  True, False,
        False, False,  True, False, False,  True,  True,  True, False, False,
        False, False, False,  True, False, False, False,  True,  True, False,
        False,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True, False,  True, False,  True,
        False, False, False,  True, False, False,  True,  True,  True, False,
        False, False,  True,  True, False, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True, False,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True, False, False,  True, False,  True, False, False,
         True,  True,  True,  True, False, False,  True,  True, False,  True,
        False, False,  True,  True,  True, False,  True, False, False,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False,  True, False,
        False,  True, False,  True,  True,  True,  True,  True, False, False,
        False, False, False,  True,  True, False, False,  True,  True, False,
         True,  True,  True,  True, False, False, False, False,  True, False,
        False, False,  True, False, False, False,  True,  True,  True,  True,
        False, False,  True, False,  True,  True, False, False,  True,  True,
         True,  True,  True, False, False, False, False, False, False,  True,
        False,  True,  True,  True, False, False, False, False, False, False,
        False, False, False,  True, False,  True,  True, False, False,  True,
         True,  True, False, False, False, False,  True,  True, False,  True,
         True, False,  True, False,  True, False, False, False,  True,  True,
        False, False, False, False, False, False,  True,  True, False,  True,
        False, False,  True, False,  True, False, False,  True, False,  True,
         True, False,  True,  True, False, False,  True, False,  True, False,
         True,  True,  True,  True,  True, False,  True,  True, False, False,
        False,  True, False, False,  True, False,  True, False,  True,  True,
        False, False, False,  True,  True,  True, False,  True, False, False,
        False, False,  True, False,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
        False, False,  True,  True, False, False,  True,  True, False,  True,
         True,  True, False, False, False,  True, False,  True, False,  True,
         True, False,  True, False,  True, False, False,  True, False,  True,
         True, False,  True, False, False, False, False, False, False,  True,
         True, False, False, False,  True,  True, False,  True,  True, False,
         True, False,  True,  True,  True, False,  True,  True,  True, False,
         True, False,  True,  True,  True,  True,  True,  True, False, False,
        False, False, False,  True, False, False,  True])
torch.Size([697])
torch.Size([357])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.3._expand_conv
6
tensor([False, False, False, False,  True,  True,  True,  True,  True,  True,
        False,  True, False, False,  True,  True,  True,  True,  True, False,
        False,  True,  True, False,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True, False, False, False,  True,  True,  True,
        False,  True,  True, False, False, False,  True, False, False,  True,
         True,  True, False,  True, False, False, False,  True, False,  True,
         True, False,  True, False, False, False, False,  True,  True, False,
        False,  True,  True,  True,  True,  True,  True, False, False, False,
        False,  True, False,  True, False, False, False,  True, False, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True, False,  True, False, False,  True,  True, False, False,  True,
         True, False, False,  True, False, False,  True, False,  True, False,
        False,  True, False,  True,  True,  True, False, False, False,  True,
        False,  True, False, False,  True,  True,  True,  True, False,  True,
        False, False, False,  True, False,  True, False, False, False,  True,
         True, False, False,  True,  True, False, False,  True, False, False,
        False,  True, False,  True, False,  True,  True, False, False,  True,
         True,  True, False,  True, False, False,  True,  True, False, False,
         True,  True, False,  True,  True,  True, False, False, False, False,
        False,  True, False,  True, False,  True,  True,  True, False,  True,
        False, False,  True,  True,  True, False, False, False, False, False,
         True, False,  True, False,  True, False,  True, False,  True, False,
        False,  True, False, False, False,  True, False, False, False,  True,
         True, False, False, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True,  True,  True, False,  True, False,
         True,  True, False,  True, False,  True, False, False, False, False,
        False,  True, False,  True,  True, False,  True,  True, False,  True,
         True, False, False, False,  True,  True,  True,  True, False,  True,
        False, False, False, False, False, False, False, False, False,  True,
        False, False, False, False, False, False, False, False,  True, False,
        False, False,  True, False, False,  True,  True,  True, False, False,
        False, False, False,  True, False, False, False,  True,  True, False,
        False,  True,  True,  True, False,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True, False,  True, False,  True,
        False, False, False,  True, False, False,  True,  True,  True, False,
        False, False,  True,  True, False, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True, False,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True, False, False,  True, False,  True, False, False,
         True,  True,  True,  True, False, False,  True,  True, False,  True,
        False, False,  True,  True,  True, False,  True, False, False,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False,  True, False,
        False,  True, False,  True,  True,  True,  True,  True, False, False,
        False, False, False,  True,  True, False, False,  True,  True, False,
         True,  True,  True,  True, False, False, False, False,  True, False,
        False, False,  True, False, False, False,  True,  True,  True,  True,
        False, False,  True, False,  True,  True, False, False,  True,  True,
         True,  True,  True, False, False, False, False, False, False,  True,
        False,  True,  True,  True, False, False, False, False, False, False,
        False, False, False,  True, False,  True,  True, False, False,  True,
         True,  True, False, False, False, False,  True,  True, False,  True,
         True, False,  True, False,  True, False, False, False,  True,  True,
        False, False, False, False, False, False,  True,  True, False,  True,
        False, False,  True, False,  True, False, False,  True, False,  True,
         True, False,  True,  True, False, False,  True, False,  True, False,
         True,  True,  True,  True,  True, False,  True,  True, False, False,
        False,  True, False, False,  True, False,  True, False,  True,  True,
        False, False, False,  True,  True,  True, False,  True, False, False,
        False, False,  True, False,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
        False, False,  True,  True, False, False,  True,  True, False,  True,
         True,  True, False, False, False,  True, False,  True, False,  True,
         True, False,  True, False,  True, False, False,  True, False,  True,
         True, False,  True, False, False, False, False, False, False,  True,
         True, False, False, False,  True,  True, False,  True,  True, False,
         True, False,  True,  True,  True, False,  True,  True,  True, False,
         True, False,  True,  True,  True,  True,  True,  True, False, False,
        False, False, False,  True, False, False,  True])
torch.Size([697])
torch.Size([357])
backbone.blocks.5.3._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.3._project_conv (Conv2d(357, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.3._project_conv (Conv2d(357, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.5.3._project_conv
4
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([192])
torch.Size([192])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 504, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 504, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 504, 10, 10]          12,600          12,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 410, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 410, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 410, 10, 10]          10,250          10,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 477, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 745, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 745, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 745, 5, 5]          18,625          18,625
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93       [1, 477, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95       [1, 477, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100       [1, 357, 5, 5]          68,544          68,544
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101       [1, 357, 5, 5]             714             714
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102       [1, 357, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103       [1, 357, 5, 5]           8,925           8,925
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104       [1, 357, 5, 5]             714             714
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]          68,544          68,544
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 2,383,200
Trainable params: 2,383,200
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.6.0._expand_conv
484

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.6.0._expand_conv (Conv2d(192, 668, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.6.0._expand_conv (Conv2d(192, 668, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=484
[1] prune_out_channels on backbone.blocks.6.0._expand_conv (Conv2d(192, 668, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.6.0._bn0 (BatchNorm2d(668, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=484
[2] prune_out_channels on backbone.blocks.6.0._bn0 (BatchNorm2d(668, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_5(HardtanhBackward0), #idxs=484
[3] prune_out_channels on _ElementWiseOp_5(HardtanhBackward0) => prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(668, 668, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=668, bias=False)), #idxs=484
[4] prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(668, 668, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=668, bias=False)) => prune_out_channels on backbone.blocks.6.0._bn1 (BatchNorm2d(668, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=484
[5] prune_out_channels on backbone.blocks.6.0._bn1 (BatchNorm2d(668, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_4(HardtanhBackward0), #idxs=484
[6] prune_out_channels on _ElementWiseOp_4(HardtanhBackward0) => prune_in_channels on backbone.blocks.6.0._project_conv (Conv2d(668, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=484
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.6.0._expand_conv
3
tensor([ True, False,  True,  ...,  True,  True, False])
torch.Size([1152])
torch.Size([668])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.6.0._depthwise_conv
2
tensor([ True, False,  True,  ...,  True,  True, False])
torch.Size([1152])
torch.Size([668])
backbone.blocks.6.0._depthwise_conv
109
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(559, 559, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=559, bias=False)) => prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(559, 559, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=559, bias=False)), #idxs=109
[1] prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(559, 559, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=559, bias=False)) => prune_out_channels on _ElementWiseOp_5(HardtanhBackward0), #idxs=109
[2] prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(559, 559, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=559, bias=False)) => prune_out_channels on backbone.blocks.6.0._bn1 (BatchNorm2d(559, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=109
[3] prune_out_channels on backbone.blocks.6.0._bn1 (BatchNorm2d(559, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_4(HardtanhBackward0), #idxs=109
[4] prune_out_channels on _ElementWiseOp_4(HardtanhBackward0) => prune_in_channels on backbone.blocks.6.0._project_conv (Conv2d(559, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=109
[5] prune_out_channels on _ElementWiseOp_5(HardtanhBackward0) => prune_out_channels on backbone.blocks.6.0._bn0 (BatchNorm2d(559, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=109
[6] prune_out_channels on backbone.blocks.6.0._bn0 (BatchNorm2d(559, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.6.0._expand_conv (Conv2d(192, 559, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=109
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7f1909c29540>>
backbone.blocks.6.0._depthwise_conv
2
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True, False,  True, False,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True, False,  True, False,
         True,  True, False,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False, False,  True,
        False,  True,  True, False, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False,  True, False,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True, False,  True,  True,  True, False,
        False, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True,  True, False, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True])
torch.Size([668])
torch.Size([559])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.6.0._expand_conv
3
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True, False,  True, False,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True, False,  True, False,
         True,  True, False,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False, False,  True,
        False,  True,  True, False, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False,  True, False,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True, False,  True,  True,  True, False,
        False, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
        False,  True,  True, False, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True])
torch.Size([668])
torch.Size([559])
backbone.blocks.6.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.6.0._project_conv (Conv2d(559, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.6.0._project_conv (Conv2d(559, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.blocks.6.0._project_conv
1
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True])
torch.Size([320])
torch.Size([320])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 504, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 504, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 504, 10, 10]          12,600          12,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 410, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 410, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 410, 10, 10]          10,250          10,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 477, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 745, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 745, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 745, 5, 5]          18,625          18,625
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93       [1, 477, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95       [1, 477, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100       [1, 357, 5, 5]          68,544          68,544
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101       [1, 357, 5, 5]             714             714
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102       [1, 357, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103       [1, 357, 5, 5]           8,925           8,925
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104       [1, 357, 5, 5]             714             714
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]          68,544          68,544
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107       [1, 559, 5, 5]         107,328         107,328
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108       [1, 559, 5, 5]           1,118           1,118
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109       [1, 559, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110       [1, 559, 5, 5]           5,031           5,031
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111       [1, 559, 5, 5]           1,118           1,118
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         178,880         178,880
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 2,071,875
Trainable params: 2,071,875
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.head.0
821

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.head.0 (Conv2d(320, 459, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.head.0 (Conv2d(320, 459, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=821
[1] prune_out_channels on backbone.head.0 (Conv2d(320, 459, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.head.1 (BatchNorm2d(459, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=821
[2] prune_out_channels on backbone.head.1 (BatchNorm2d(459, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_3(HardtanhBackward0), #idxs=821
[3] prune_out_channels on _ElementWiseOp_3(HardtanhBackward0) => prune_out_channels on _ElementWiseOp_2(MeanBackward1), #idxs=821
[4] prune_out_channels on _ElementWiseOp_2(MeanBackward1) => prune_out_channels on _Reshape_0(), #idxs=821
[5] prune_out_channels on _Reshape_0() => prune_in_channels on backbone.fc (Linear(in_features=459, out_features=5, bias=True)), #idxs=821
[6] prune_in_channels on backbone.fc (Linear(in_features=459, out_features=5, bias=True)) => prune_out_channels on _ElementWiseOp_1(TBackward0), #idxs=821
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7f1909c29990>>
backbone.head.0
0
tensor([ True, False,  True,  ..., False,  True, False])
torch.Size([1280])
torch.Size([459])
4204
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 89, 75, 75]           1,424           1,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 89, 75, 75]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 89, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 89, 38, 38]             801             801
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 89, 38, 38]             178             178
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,136           2,136
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 131, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 131, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 131, 38, 38]           1,179           1,179
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 131, 38, 38]             262             262
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,144           3,144
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 139, 19, 19]           3,475           3,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 139, 19, 19]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,560           5,560
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 210, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 210, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 210, 19, 19]           5,250           5,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 210, 19, 19]             420             420
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           8,400           8,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 235, 19, 19]           9,400           9,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 235, 19, 19]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 235, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 235, 10, 10]           2,115           2,115
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 235, 10, 10]             470             470
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          18,800          18,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 391, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 391, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 391, 10, 10]           3,519           3,519
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 391, 10, 10]             782             782
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          31,280          31,280
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 364, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 364, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 364, 10, 10]           3,276           3,276
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 364, 10, 10]             728             728
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          29,120          29,120
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 462, 10, 10]          36,960          36,960
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 462, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 462, 10, 10]          11,550          11,550
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 462, 10, 10]             924             924
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          51,744          51,744
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 504, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 504, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 504, 10, 10]          12,600          12,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 504, 10, 10]           1,008           1,008
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          56,448          56,448
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 410, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 410, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 410, 10, 10]          10,250          10,250
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 410, 10, 10]             820             820
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          45,920          45,920
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 477, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 745, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 745, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 745, 5, 5]          18,625          18,625
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 745, 5, 5]           1,490           1,490
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         143,040         143,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93       [1, 477, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95       [1, 477, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96       [1, 477, 5, 5]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97       [1, 477, 5, 5]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]          91,584          91,584
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100       [1, 357, 5, 5]          68,544          68,544
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101       [1, 357, 5, 5]             714             714
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102       [1, 357, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103       [1, 357, 5, 5]           8,925           8,925
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104       [1, 357, 5, 5]             714             714
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]          68,544          68,544
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107       [1, 559, 5, 5]         107,328         107,328
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108       [1, 559, 5, 5]           1,118           1,118
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109       [1, 559, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110       [1, 559, 5, 5]           5,031           5,031
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111       [1, 559, 5, 5]           1,118           1,118
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         178,880         178,880
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114       [1, 459, 5, 5]         146,880         146,880
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115       [1, 459, 5, 5]             918             918
               RecycleNetwork/EfficientNetLite                ReLU6-116       [1, 459, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117       [1, 459, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118             [1, 459]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           2,300           2,300
============================================================================================================================
Total params: 1,803,408
Trainable params: 1,803,408
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Training Started
Epoch: 1, Training Loss: 0.755617, Validation Loss: 0.691807, Training Accuracy: 0.687084, Validation Accuracy: 0.725677
Validation loss decreased (inf --> 0.691807).  Saving model ...
Epoch: 2, Training Loss: 0.716441, Validation Loss: 0.658736, Training Accuracy: 0.715593, Validation Accuracy: 0.747152
Validation loss decreased (0.691807 --> 0.658736).  Saving model ...
Epoch: 3, Training Loss: 0.679148, Validation Loss: 0.626181, Training Accuracy: 0.742546, Validation Accuracy: 0.776844
Validation loss decreased (0.658736 --> 0.626181).  Saving model ...
Epoch: 4, Training Loss: 0.650105, Validation Loss: 0.599933, Training Accuracy: 0.764768, Validation Accuracy: 0.803922
Validation loss decreased (0.626181 --> 0.599933).  Saving model ...
Epoch: 5, Training Loss: 0.624412, Validation Loss: 0.576253, Training Accuracy: 0.787551, Validation Accuracy: 0.822969
Validation loss decreased (0.599933 --> 0.576253).  Saving model ...
Epoch: 6, Training Loss: 0.601114, Validation Loss: 0.552094, Training Accuracy: 0.804233, Validation Accuracy: 0.849300
Validation loss decreased (0.576253 --> 0.552094).  Saving model ...
Epoch: 7, Training Loss: 0.583062, Validation Loss: 0.530811, Training Accuracy: 0.823343, Validation Accuracy: 0.863866
Validation loss decreased (0.552094 --> 0.530811).  Saving model ...
Epoch: 8, Training Loss: 0.563224, Validation Loss: 0.512424, Training Accuracy: 0.836290, Validation Accuracy: 0.873203
Validation loss decreased (0.530811 --> 0.512424).  Saving model ...
Epoch: 9, Training Loss: 0.549099, Validation Loss: 0.493917, Training Accuracy: 0.846187, Validation Accuracy: 0.880859
Validation loss decreased (0.512424 --> 0.493917).  Saving model ...
Epoch: 10, Training Loss: 0.528728, Validation Loss: 0.477617, Training Accuracy: 0.857267, Validation Accuracy: 0.887021
Validation loss decreased (0.493917 --> 0.477617).  Saving model ...
Epoch: 11, Training Loss: 0.512233, Validation Loss: 0.463028, Training Accuracy: 0.866044, Validation Accuracy: 0.892063
Validation loss decreased (0.477617 --> 0.463028).  Saving model ...
Epoch: 12, Training Loss: 0.498725, Validation Loss: 0.449050, Training Accuracy: 0.875070, Validation Accuracy: 0.895238
Validation loss decreased (0.463028 --> 0.449050).  Saving model ...
Epoch: 13, Training Loss: 0.482945, Validation Loss: 0.435389, Training Accuracy: 0.881730, Validation Accuracy: 0.899533
Validation loss decreased (0.449050 --> 0.435389).  Saving model ...
Epoch: 14, Training Loss: 0.470704, Validation Loss: 0.420989, Training Accuracy: 0.885777, Validation Accuracy: 0.902334
Validation loss decreased (0.435389 --> 0.420989).  Saving model ...
Epoch: 15, Training Loss: 0.460036, Validation Loss: 0.411493, Training Accuracy: 0.890134, Validation Accuracy: 0.902894
Validation loss decreased (0.420989 --> 0.411493).  Saving model ...
Epoch: 16, Training Loss: 0.450951, Validation Loss: 0.397661, Training Accuracy: 0.890943, Validation Accuracy: 0.906256
Validation loss decreased (0.411493 --> 0.397661).  Saving model ...
Epoch: 17, Training Loss: 0.439910, Validation Loss: 0.390139, Training Accuracy: 0.896047, Validation Accuracy: 0.908123
Validation loss decreased (0.397661 --> 0.390139).  Saving model ...
Epoch: 18, Training Loss: 0.426148, Validation Loss: 0.380449, Training Accuracy: 0.898724, Validation Accuracy: 0.910738
Validation loss decreased (0.390139 --> 0.380449).  Saving model ...
Epoch: 19, Training Loss: 0.420977, Validation Loss: 0.371162, Training Accuracy: 0.901152, Validation Accuracy: 0.912605
Validation loss decreased (0.380449 --> 0.371162).  Saving model ...
Epoch: 20, Training Loss: 0.416463, Validation Loss: 0.362969, Training Accuracy: 0.901338, Validation Accuracy: 0.913912
Validation loss decreased (0.371162 --> 0.362969).  Saving model ...
Epoch: 21, Training Loss: 0.401219, Validation Loss: 0.354945, Training Accuracy: 0.905011, Validation Accuracy: 0.916153
Validation loss decreased (0.362969 --> 0.354945).  Saving model ...
Epoch: 22, Training Loss: 0.396481, Validation Loss: 0.347601, Training Accuracy: 0.907065, Validation Accuracy: 0.915966
Validation loss decreased (0.354945 --> 0.347601).  Saving model ...
Epoch: 23, Training Loss: 0.387824, Validation Loss: 0.343328, Training Accuracy: 0.905882, Validation Accuracy: 0.916527
Validation loss decreased (0.347601 --> 0.343328).  Saving model ...
Epoch: 24, Training Loss: 0.378081, Validation Loss: 0.335925, Training Accuracy: 0.911671, Validation Accuracy: 0.917834
Validation loss decreased (0.343328 --> 0.335925).  Saving model ...
Epoch: 25, Training Loss: 0.374127, Validation Loss: 0.330024, Training Accuracy: 0.910240, Validation Accuracy: 0.919328
Validation loss decreased (0.335925 --> 0.330024).  Saving model ...
Epoch: 26, Training Loss: 0.367981, Validation Loss: 0.328282, Training Accuracy: 0.912543, Validation Accuracy: 0.917647
Validation loss decreased (0.330024 --> 0.328282).  Saving model ...
Epoch: 27, Training Loss: 0.362027, Validation Loss: 0.318973, Training Accuracy: 0.913850, Validation Accuracy: 0.919701
Validation loss decreased (0.328282 --> 0.318973).  Saving model ...
Epoch: 28, Training Loss: 0.354654, Validation Loss: 0.313881, Training Accuracy: 0.915406, Validation Accuracy: 0.920448
Validation loss decreased (0.318973 --> 0.313881).  Saving model ...
Epoch: 29, Training Loss: 0.348553, Validation Loss: 0.309616, Training Accuracy: 0.916091, Validation Accuracy: 0.920075
Validation loss decreased (0.313881 --> 0.309616).  Saving model ...
Epoch: 30, Training Loss: 0.343621, Validation Loss: 0.306521, Training Accuracy: 0.916402, Validation Accuracy: 0.920075
Validation loss decreased (0.309616 --> 0.306521).  Saving model ...
Epoch: 31, Training Loss: 0.339612, Validation Loss: 0.303395, Training Accuracy: 0.916589, Validation Accuracy: 0.920822
Validation loss decreased (0.306521 --> 0.303395).  Saving model ...
Epoch: 32, Training Loss: 0.341274, Validation Loss: 0.299231, Training Accuracy: 0.916900, Validation Accuracy: 0.920822
Validation loss decreased (0.303395 --> 0.299231).  Saving model ...
Epoch: 33, Training Loss: 0.337323, Validation Loss: 0.294085, Training Accuracy: 0.917523, Validation Accuracy: 0.921755
Validation loss decreased (0.299231 --> 0.294085).  Saving model ...
Epoch: 34, Training Loss: 0.336340, Validation Loss: 0.291974, Training Accuracy: 0.914908, Validation Accuracy: 0.923063
Validation loss decreased (0.294085 --> 0.291974).  Saving model ...
Epoch: 35, Training Loss: 0.335144, Validation Loss: 0.289513, Training Accuracy: 0.913912, Validation Accuracy: 0.922129
Validation loss decreased (0.291974 --> 0.289513).  Saving model ...
Epoch: 36, Training Loss: 0.326125, Validation Loss: 0.285937, Training Accuracy: 0.916900, Validation Accuracy: 0.922689
Validation loss decreased (0.289513 --> 0.285937).  Saving model ...
Epoch: 37, Training Loss: 0.325206, Validation Loss: 0.282970, Training Accuracy: 0.918145, Validation Accuracy: 0.923063
Validation loss decreased (0.285937 --> 0.282970).  Saving model ...
Epoch: 38, Training Loss: 0.315198, Validation Loss: 0.280152, Training Accuracy: 0.920822, Validation Accuracy: 0.923249
Validation loss decreased (0.282970 --> 0.280152).  Saving model ...
Epoch: 39, Training Loss: 0.312160, Validation Loss: 0.279123, Training Accuracy: 0.918954, Validation Accuracy: 0.923436
Validation loss decreased (0.280152 --> 0.279123).  Saving model ...
Epoch: 40, Training Loss: 0.306186, Validation Loss: 0.278684, Training Accuracy: 0.922378, Validation Accuracy: 0.923249
Validation loss decreased (0.279123 --> 0.278684).  Saving model ...
Epoch: 41, Training Loss: 0.305135, Validation Loss: 0.275488, Training Accuracy: 0.920012, Validation Accuracy: 0.923249
Epoch 00041: reducing learning rate of group 0 to 1.0000e-06.
Validation loss decreased (0.278684 --> 0.275488).  Saving model ...
Epoch: 42, Training Loss: 0.304270, Validation Loss: 0.272731, Training Accuracy: 0.922689, Validation Accuracy: 0.924370
Validation loss decreased (0.275488 --> 0.272731).  Saving model ...
Epoch: 43, Training Loss: 0.308813, Validation Loss: 0.272153, Training Accuracy: 0.922502, Validation Accuracy: 0.923249
Validation loss decreased (0.272731 --> 0.272153).  Saving model ...
Epoch: 44, Training Loss: 0.307659, Validation Loss: 0.272125, Training Accuracy: 0.923996, Validation Accuracy: 0.923623
Validation loss decreased (0.272153 --> 0.272125).  Saving model ...
Epoch: 45, Training Loss: 0.305116, Validation Loss: 0.271950, Training Accuracy: 0.920199, Validation Accuracy: 0.924183
Validation loss decreased (0.272125 --> 0.271950).  Saving model ...
Epoch: 46, Training Loss: 0.304706, Validation Loss: 0.272625, Training Accuracy: 0.923000, Validation Accuracy: 0.923436
Epoch 00046: reducing learning rate of group 0 to 1.0000e-07.
EarlyStopping counter: 1 out of 10
Epoch: 47, Training Loss: 0.305051, Validation Loss: 0.271512, Training Accuracy: 0.920697, Validation Accuracy: 0.923996
Validation loss decreased (0.271950 --> 0.271512).  Saving model ...
Epoch: 48, Training Loss: 0.310069, Validation Loss: 0.270814, Training Accuracy: 0.922067, Validation Accuracy: 0.923810
Validation loss decreased (0.271512 --> 0.270814).  Saving model ...
Epoch: 49, Training Loss: 0.304280, Validation Loss: 0.270775, Training Accuracy: 0.921382, Validation Accuracy: 0.924743
Validation loss decreased (0.270814 --> 0.270775).  Saving model ...
Epoch: 50, Training Loss: 0.305499, Validation Loss: 0.271606, Training Accuracy: 0.921818, Validation Accuracy: 0.924743
Epoch 00050: reducing learning rate of group 0 to 1.0000e-08.
EarlyStopping counter: 1 out of 10
Epoch: 51, Training Loss: 0.305426, Validation Loss: 0.270533, Training Accuracy: 0.921320, Validation Accuracy: 0.924743
Validation loss decreased (0.270775 --> 0.270533).  Saving model ...
Epoch: 52, Training Loss: 0.304471, Validation Loss: 0.271482, Training Accuracy: 0.921880, Validation Accuracy: 0.924930
EarlyStopping counter: 1 out of 10
Epoch: 53, Training Loss: 0.305826, Validation Loss: 0.272049, Training Accuracy: 0.919888, Validation Accuracy: 0.924743
EarlyStopping counter: 2 out of 10
Epoch: 54, Training Loss: 0.302501, Validation Loss: 0.272206, Training Accuracy: 0.922004, Validation Accuracy: 0.924183
EarlyStopping counter: 3 out of 10
Epoch: 55, Training Loss: 0.304586, Validation Loss: 0.273089, Training Accuracy: 0.920759, Validation Accuracy: 0.923436
EarlyStopping counter: 4 out of 10
Epoch: 56, Training Loss: 0.301656, Validation Loss: 0.274336, Training Accuracy: 0.918643, Validation Accuracy: 0.923996
EarlyStopping counter: 5 out of 10
Epoch: 57, Training Loss: 0.307341, Validation Loss: 0.273769, Training Accuracy: 0.920635, Validation Accuracy: 0.922316
EarlyStopping counter: 6 out of 10
Epoch: 58, Training Loss: 0.305782, Validation Loss: 0.272808, Training Accuracy: 0.921008, Validation Accuracy: 0.923810
EarlyStopping counter: 7 out of 10
Epoch: 59, Training Loss: 0.303852, Validation Loss: 0.271589, Training Accuracy: 0.921506, Validation Accuracy: 0.924556
EarlyStopping counter: 8 out of 10
Epoch: 60, Training Loss: 0.309452, Validation Loss: 0.271116, Training Accuracy: 0.919701, Validation Accuracy: 0.924556
EarlyStopping counter: 9 out of 10
Epoch: 61, Training Loss: 0.311324, Validation Loss: 0.273254, Training Accuracy: 0.921444, Validation Accuracy: 0.922876
EarlyStopping counter: 10 out of 10
Early Stopping at Epoch: 61
Test Loss: 0.263494, Test Accuracy: 0.9234
