----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 32, 75, 75]             864             864
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 32, 75, 75]              64              64
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 32, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 32, 75, 75]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 32, 75, 75]              64              64
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 32, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             512             512
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 96, 75, 75]           1,536           1,536
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 96, 75, 75]             192             192
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 96, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 96, 38, 38]             864             864
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 96, 38, 38]             192             192
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 144, 38, 38]           1,296           1,296
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 144, 19, 19]           3,600           3,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 144, 19, 19]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,760           5,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,377,413
Trainable params: 3,377,413
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
17
tensor([2, 2, 0, 3, 2, 3, 0, 2, 2, 2, 2, 2, 1, 2, 3, 2, 0, 0, 2, 2, 4, 2, 2, 2,
        2, 3, 4, 2, 2, 2, 2, 4])
tensor([4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 2, 3, 1, 3, 2, 2, 4, 4,
        2, 2, 0, 2, 4, 3, 3, 2])
tensor([4, 2, 0, 2, 2, 2, 2, 3, 2, 3, 3, 1, 1, 1, 2, 1, 4, 1, 2, 4, 2, 2, 2, 2,
        2, 3, 4, 2, 1, 2, 4, 2])
tensor([1, 2, 4, 2, 2, 2, 2, 2, 2, 3, 1, 0, 2, 4, 2, 2, 4, 4, 4, 4, 0, 0, 2, 2,
        4, 2, 2, 2, 2, 2, 2, 0])
tensor([2, 2, 4, 2, 2, 2, 2, 1, 0, 1, 4, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0, 4, 2,
        2, 2, 2, 2, 2, 3, 0, 2])
tensor([4, 1, 3, 2, 2, 4, 3, 2, 0, 2, 2, 4, 2, 3, 0, 4, 3, 3, 3, 2, 2, 3, 3, 3,
        4, 2, 1, 4, 2, 2, 0, 2])
tensor([4, 2, 2, 3, 2, 2, 2, 3, 2, 2, 4, 3, 2, 0, 3, 2, 2, 2, 4, 1, 2, 2, 1, 2,
        2, 2, 2, 2, 0, 2, 2, 2])
tensor([2, 2, 1, 4, 1, 2, 3, 1, 4, 2, 3, 2, 2, 2, 4, 4, 2, 0, 2, 2, 1, 0, 4, 2,
        3, 4, 4, 1, 3, 2, 3, 2])
tensor([4, 2, 3, 2, 3, 2, 2, 3, 0, 2, 3, 2, 1, 2, 0, 1, 4, 0, 2, 2, 1, 4, 2, 4,
        4, 4, 1, 4, 0, 2, 2, 2])
tensor([2, 2, 4, 2, 3, 2, 4, 2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 4, 4, 4, 4, 2, 2, 2,
        2, 1, 1, 1, 4, 2, 2, 4])
tensor([2, 2, 2, 4, 0, 1, 2, 3, 4, 2, 4, 2, 0, 2, 2, 2, 3, 2, 4, 3, 2, 2, 2, 2,
        2, 2, 0, 2, 2, 2, 3, 3])
tensor([3, 2, 3, 2, 2, 4, 1, 0, 2, 4, 0, 1, 0, 0, 1, 1, 2, 2, 2, 1, 2, 4, 2, 0,
        0, 2, 2, 2, 4, 2, 0, 2])
tensor([2, 3, 2, 3, 2, 1, 2, 2, 1, 1, 3, 3, 2, 2, 0, 2, 4, 2, 4, 2, 2, 4, 0, 4,
        2, 2, 4, 2, 2, 3, 4, 2])
tensor([2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 2, 0, 2, 2, 1, 2, 3, 3, 3, 2, 2, 3, 4, 2,
        0, 2, 2, 0, 2, 3, 3, 3])
tensor([2, 0, 2, 4, 4, 1, 2, 3, 2, 3, 3, 3, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 2, 0,
        2, 2, 3, 2, 4, 4, 2, 2])
tensor([2, 2, 4, 2, 0, 4, 2, 2, 2, 1, 2, 1, 1, 2, 3, 1, 2, 4, 3, 3, 2, 1, 3, 4,
        2, 0, 2, 1, 2, 3, 0, 2])
tensor([1, 1, 0, 4, 3, 4, 2, 4, 4, 2, 2, 1, 2, 4, 4, 2, 0, 2, 2, 3, 2, 4, 2])
backbone.stem.0
5

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.stem.0 (Conv2d(3, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)) => prune_out_channels on backbone.stem.0 (Conv2d(3, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)), #idxs=5
[1] prune_out_channels on backbone.stem.0 (Conv2d(3, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)) => prune_out_channels on backbone.stem.1 (BatchNorm2d(27, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[2] prune_out_channels on backbone.stem.1 (BatchNorm2d(27, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_26(HardtanhBackward0), #idxs=5
[3] prune_out_channels on _ElementWiseOp_26(HardtanhBackward0) => prune_out_channels on backbone.blocks.0.0._depthwise_conv (Conv2d(27, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=27, bias=False)), #idxs=5
[4] prune_out_channels on backbone.blocks.0.0._depthwise_conv (Conv2d(27, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=27, bias=False)) => prune_out_channels on backbone.blocks.0.0._bn1 (BatchNorm2d(27, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[5] prune_out_channels on backbone.blocks.0.0._bn1 (BatchNorm2d(27, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_25(HardtanhBackward0), #idxs=5
[6] prune_out_channels on _ElementWiseOp_25(HardtanhBackward0) => prune_in_channels on backbone.blocks.0.0._project_conv (Conv2d(27, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.stem.0
48
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True, False])
torch.Size([32])
torch.Size([27])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.0.0._depthwise_conv
47
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True, False])
torch.Size([32])
torch.Size([27])
backbone.blocks.0.0._depthwise_conv
0
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.0.0._depthwise_conv (Conv2d(27, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=27, bias=False)) => prune_out_channels on backbone.blocks.0.0._depthwise_conv (Conv2d(27, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=27, bias=False)), #idxs=0
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.0.0._depthwise_conv
47
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True])
torch.Size([27])
torch.Size([27])
backbone.blocks.0.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.0.0._project_conv (Conv2d(27, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.0.0._project_conv (Conv2d(27, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.0.0._project_conv
46
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([16])
torch.Size([16])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 96, 75, 75]           1,536           1,536
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 96, 75, 75]             192             192
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 96, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 96, 38, 38]             864             864
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 96, 38, 38]             192             192
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 144, 38, 38]           1,296           1,296
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 144, 19, 19]           3,600           3,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 144, 19, 19]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,760           5,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,377,133
Trainable params: 3,377,133
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.1.0._expand_conv
5

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.0._expand_conv (Conv2d(16, 91, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.0._expand_conv (Conv2d(16, 91, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
[1] prune_out_channels on backbone.blocks.1.0._expand_conv (Conv2d(16, 91, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.0._bn0 (BatchNorm2d(91, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[2] prune_out_channels on backbone.blocks.1.0._bn0 (BatchNorm2d(91, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_24(HardtanhBackward0), #idxs=5
[3] prune_out_channels on _ElementWiseOp_24(HardtanhBackward0) => prune_out_channels on backbone.blocks.1.0._depthwise_conv (Conv2d(91, 91, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=91, bias=False)), #idxs=5
[4] prune_out_channels on backbone.blocks.1.0._depthwise_conv (Conv2d(91, 91, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=91, bias=False)) => prune_out_channels on backbone.blocks.1.0._bn1 (BatchNorm2d(91, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=5
[5] prune_out_channels on backbone.blocks.1.0._bn1 (BatchNorm2d(91, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_23(HardtanhBackward0), #idxs=5
[6] prune_out_channels on _ElementWiseOp_23(HardtanhBackward0) => prune_in_channels on backbone.blocks.1.0._project_conv (Conv2d(91, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=5
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.1.0._expand_conv
45
tensor([ True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True])
torch.Size([96])
torch.Size([91])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.1.0._depthwise_conv
44
tensor([ True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True])
torch.Size([96])
torch.Size([91])
backbone.blocks.1.0._depthwise_conv
0
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.0._depthwise_conv (Conv2d(91, 91, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=91, bias=False)) => prune_out_channels on backbone.blocks.1.0._depthwise_conv (Conv2d(91, 91, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=91, bias=False)), #idxs=0
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.1.0._depthwise_conv
44
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True])
torch.Size([91])
torch.Size([91])
backbone.blocks.1.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.0._project_conv (Conv2d(91, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.0._project_conv (Conv2d(91, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.1.0._project_conv
43
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([24])
torch.Size([24])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 144, 38, 38]           1,296           1,296
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 144, 19, 19]           3,600           3,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 144, 19, 19]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,760           5,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,376,868
Trainable params: 3,376,868
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.1.1._expand_conv
3

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.1._expand_conv (Conv2d(24, 141, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.1._expand_conv (Conv2d(24, 141, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=3
[1] prune_out_channels on backbone.blocks.1.1._expand_conv (Conv2d(24, 141, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.1._bn0 (BatchNorm2d(141, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=3
[2] prune_out_channels on backbone.blocks.1.1._bn0 (BatchNorm2d(141, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_28(HardtanhBackward0), #idxs=3
[3] prune_out_channels on _ElementWiseOp_28(HardtanhBackward0) => prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(141, 141, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=141, bias=False)), #idxs=3
[4] prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(141, 141, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=141, bias=False)) => prune_out_channels on backbone.blocks.1.1._bn1 (BatchNorm2d(141, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=3
[5] prune_out_channels on backbone.blocks.1.1._bn1 (BatchNorm2d(141, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_27(HardtanhBackward0), #idxs=3
[6] prune_out_channels on _ElementWiseOp_27(HardtanhBackward0) => prune_in_channels on backbone.blocks.1.1._project_conv (Conv2d(141, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=3
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.1.1._expand_conv
42
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True])
torch.Size([144])
torch.Size([141])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.1.1._depthwise_conv
41
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True])
torch.Size([144])
torch.Size([141])
backbone.blocks.1.1._depthwise_conv
2
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(139, 139, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=139, bias=False)) => prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(139, 139, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=139, bias=False)), #idxs=2
[1] prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(139, 139, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=139, bias=False)) => prune_out_channels on _ElementWiseOp_28(HardtanhBackward0), #idxs=2
[2] prune_out_channels on backbone.blocks.1.1._depthwise_conv (Conv2d(139, 139, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=139, bias=False)) => prune_out_channels on backbone.blocks.1.1._bn1 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=2
[3] prune_out_channels on backbone.blocks.1.1._bn1 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_27(HardtanhBackward0), #idxs=2
[4] prune_out_channels on _ElementWiseOp_27(HardtanhBackward0) => prune_in_channels on backbone.blocks.1.1._project_conv (Conv2d(139, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=2
[5] prune_out_channels on _ElementWiseOp_28(HardtanhBackward0) => prune_out_channels on backbone.blocks.1.1._bn0 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=2
[6] prune_out_channels on backbone.blocks.1.1._bn0 (BatchNorm2d(139, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.1.1._expand_conv (Conv2d(24, 139, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=2
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.1.1._depthwise_conv
41
tensor([ True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True])
torch.Size([141])
torch.Size([139])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.1.1._expand_conv
42
tensor([ True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True])
torch.Size([141])
torch.Size([139])
backbone.blocks.1.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.1.1._project_conv (Conv2d(139, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.1.1._project_conv (Conv2d(139, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.1.1._project_conv
40
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([24])
torch.Size([24])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 144, 38, 38]           3,456           3,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 144, 38, 38]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 144, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 144, 19, 19]           3,600           3,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 144, 19, 19]             288             288
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,760           5,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,376,563
Trainable params: 3,376,563
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.2.0._expand_conv
3

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.0._expand_conv (Conv2d(24, 141, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.0._expand_conv (Conv2d(24, 141, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=3
[1] prune_out_channels on backbone.blocks.2.0._expand_conv (Conv2d(24, 141, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.0._bn0 (BatchNorm2d(141, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=3
[2] prune_out_channels on backbone.blocks.2.0._bn0 (BatchNorm2d(141, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_21(HardtanhBackward0), #idxs=3
[3] prune_out_channels on _ElementWiseOp_21(HardtanhBackward0) => prune_out_channels on backbone.blocks.2.0._depthwise_conv (Conv2d(141, 141, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=141, bias=False)), #idxs=3
[4] prune_out_channels on backbone.blocks.2.0._depthwise_conv (Conv2d(141, 141, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=141, bias=False)) => prune_out_channels on backbone.blocks.2.0._bn1 (BatchNorm2d(141, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=3
[5] prune_out_channels on backbone.blocks.2.0._bn1 (BatchNorm2d(141, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_20(HardtanhBackward0), #idxs=3
[6] prune_out_channels on _ElementWiseOp_20(HardtanhBackward0) => prune_in_channels on backbone.blocks.2.0._project_conv (Conv2d(141, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=3
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.2.0._expand_conv
39
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True])
torch.Size([144])
torch.Size([141])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.2.0._depthwise_conv
38
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True])
torch.Size([144])
torch.Size([141])
backbone.blocks.2.0._depthwise_conv
0
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.0._depthwise_conv (Conv2d(141, 141, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=141, bias=False)) => prune_out_channels on backbone.blocks.2.0._depthwise_conv (Conv2d(141, 141, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=141, bias=False)), #idxs=0
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.2.0._depthwise_conv
38
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True])
torch.Size([141])
torch.Size([141])
backbone.blocks.2.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.0._project_conv (Conv2d(141, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.0._project_conv (Conv2d(141, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.2.0._project_conv
37
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([40])
torch.Size([40])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 240, 19, 19]           6,000           6,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,376,284
Trainable params: 3,376,284
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.2.1._expand_conv
3

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.1._expand_conv (Conv2d(40, 237, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.1._expand_conv (Conv2d(40, 237, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=3
[1] prune_out_channels on backbone.blocks.2.1._expand_conv (Conv2d(40, 237, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.1._bn0 (BatchNorm2d(237, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=3
[2] prune_out_channels on backbone.blocks.2.1._bn0 (BatchNorm2d(237, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_30(HardtanhBackward0), #idxs=3
[3] prune_out_channels on _ElementWiseOp_30(HardtanhBackward0) => prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(237, 237, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=237, bias=False)), #idxs=3
[4] prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(237, 237, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=237, bias=False)) => prune_out_channels on backbone.blocks.2.1._bn1 (BatchNorm2d(237, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=3
[5] prune_out_channels on backbone.blocks.2.1._bn1 (BatchNorm2d(237, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_29(HardtanhBackward0), #idxs=3
[6] prune_out_channels on _ElementWiseOp_29(HardtanhBackward0) => prune_in_channels on backbone.blocks.2.1._project_conv (Conv2d(237, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=3
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.2.1._expand_conv
36
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([240])
torch.Size([237])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.2.1._depthwise_conv
35
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([240])
torch.Size([237])
backbone.blocks.2.1._depthwise_conv
7
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(230, 230, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=230, bias=False)) => prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(230, 230, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=230, bias=False)), #idxs=7
[1] prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(230, 230, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=230, bias=False)) => prune_out_channels on _ElementWiseOp_30(HardtanhBackward0), #idxs=7
[2] prune_out_channels on backbone.blocks.2.1._depthwise_conv (Conv2d(230, 230, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=230, bias=False)) => prune_out_channels on backbone.blocks.2.1._bn1 (BatchNorm2d(230, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=7
[3] prune_out_channels on backbone.blocks.2.1._bn1 (BatchNorm2d(230, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_29(HardtanhBackward0), #idxs=7
[4] prune_out_channels on _ElementWiseOp_29(HardtanhBackward0) => prune_in_channels on backbone.blocks.2.1._project_conv (Conv2d(230, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=7
[5] prune_out_channels on _ElementWiseOp_30(HardtanhBackward0) => prune_out_channels on backbone.blocks.2.1._bn0 (BatchNorm2d(230, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=7
[6] prune_out_channels on backbone.blocks.2.1._bn0 (BatchNorm2d(230, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.2.1._expand_conv (Conv2d(40, 230, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=7
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.2.1._depthwise_conv
35
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True])
torch.Size([237])
torch.Size([230])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.2.1._expand_conv
36
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True])
torch.Size([237])
torch.Size([230])
backbone.blocks.2.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.2.1._project_conv (Conv2d(230, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.2.1._project_conv (Conv2d(230, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.2.1._project_conv
34
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([40])
torch.Size([40])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 240, 19, 19]           9,600           9,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 240, 19, 19]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 240, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 240, 10, 10]           2,160           2,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 240, 10, 10]             480             480
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,200          19,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,375,194
Trainable params: 3,375,194
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.3.0._expand_conv
2

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.0._expand_conv (Conv2d(40, 238, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.0._expand_conv (Conv2d(40, 238, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=2
[1] prune_out_channels on backbone.blocks.3.0._expand_conv (Conv2d(40, 238, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.0._bn0 (BatchNorm2d(238, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=2
[2] prune_out_channels on backbone.blocks.3.0._bn0 (BatchNorm2d(238, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_18(HardtanhBackward0), #idxs=2
[3] prune_out_channels on _ElementWiseOp_18(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.0._depthwise_conv (Conv2d(238, 238, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=238, bias=False)), #idxs=2
[4] prune_out_channels on backbone.blocks.3.0._depthwise_conv (Conv2d(238, 238, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=238, bias=False)) => prune_out_channels on backbone.blocks.3.0._bn1 (BatchNorm2d(238, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=2
[5] prune_out_channels on backbone.blocks.3.0._bn1 (BatchNorm2d(238, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_17(HardtanhBackward0), #idxs=2
[6] prune_out_channels on _ElementWiseOp_17(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.0._project_conv (Conv2d(238, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=2
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.3.0._expand_conv
33
tensor([ True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([240])
torch.Size([238])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.3.0._depthwise_conv
32
tensor([ True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([240])
torch.Size([238])
backbone.blocks.3.0._depthwise_conv
0
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.0._depthwise_conv (Conv2d(238, 238, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=238, bias=False)) => prune_out_channels on backbone.blocks.3.0._depthwise_conv (Conv2d(238, 238, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=238, bias=False)), #idxs=0
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.3.0._depthwise_conv
32
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True])
torch.Size([238])
torch.Size([238])
backbone.blocks.3.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.0._project_conv (Conv2d(238, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.0._project_conv (Conv2d(238, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.3.0._project_conv
31
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True])
torch.Size([80])
torch.Size([80])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,374,928
Trainable params: 3,374,928
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.3.1._expand_conv
15

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.1._expand_conv (Conv2d(80, 465, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.1._expand_conv (Conv2d(80, 465, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=15
[1] prune_out_channels on backbone.blocks.3.1._expand_conv (Conv2d(80, 465, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.1._bn0 (BatchNorm2d(465, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=15
[2] prune_out_channels on backbone.blocks.3.1._bn0 (BatchNorm2d(465, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_32(HardtanhBackward0), #idxs=15
[3] prune_out_channels on _ElementWiseOp_32(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(465, 465, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=465, bias=False)), #idxs=15
[4] prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(465, 465, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=465, bias=False)) => prune_out_channels on backbone.blocks.3.1._bn1 (BatchNorm2d(465, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=15
[5] prune_out_channels on backbone.blocks.3.1._bn1 (BatchNorm2d(465, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_31(HardtanhBackward0), #idxs=15
[6] prune_out_channels on _ElementWiseOp_31(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.1._project_conv (Conv2d(465, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=15
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.3.1._expand_conv
30
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([465])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.3.1._depthwise_conv
29
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([465])
backbone.blocks.3.1._depthwise_conv
15
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(450, 450, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=450, bias=False)) => prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(450, 450, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=450, bias=False)), #idxs=15
[1] prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(450, 450, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=450, bias=False)) => prune_out_channels on _ElementWiseOp_32(HardtanhBackward0), #idxs=15
[2] prune_out_channels on backbone.blocks.3.1._depthwise_conv (Conv2d(450, 450, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=450, bias=False)) => prune_out_channels on backbone.blocks.3.1._bn1 (BatchNorm2d(450, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=15
[3] prune_out_channels on backbone.blocks.3.1._bn1 (BatchNorm2d(450, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_31(HardtanhBackward0), #idxs=15
[4] prune_out_channels on _ElementWiseOp_31(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.1._project_conv (Conv2d(450, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=15
[5] prune_out_channels on _ElementWiseOp_32(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.1._bn0 (BatchNorm2d(450, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=15
[6] prune_out_channels on backbone.blocks.3.1._bn0 (BatchNorm2d(450, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.3.1._expand_conv (Conv2d(80, 450, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=15
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.3.1._depthwise_conv
29
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True])
torch.Size([465])
torch.Size([450])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.3.1._expand_conv
30
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True])
torch.Size([465])
torch.Size([450])
backbone.blocks.3.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.1._project_conv (Conv2d(450, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.1._project_conv (Conv2d(450, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.3.1._project_conv
28
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True])
torch.Size([80])
torch.Size([80])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 480, 10, 10]           4,320           4,320
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,369,738
Trainable params: 3,369,738
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.3.2._expand_conv
8

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.2._expand_conv (Conv2d(80, 472, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.2._expand_conv (Conv2d(80, 472, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
[1] prune_out_channels on backbone.blocks.3.2._expand_conv (Conv2d(80, 472, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.2._bn0 (BatchNorm2d(472, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[2] prune_out_channels on backbone.blocks.3.2._bn0 (BatchNorm2d(472, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_34(HardtanhBackward0), #idxs=8
[3] prune_out_channels on _ElementWiseOp_34(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(472, 472, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=472, bias=False)), #idxs=8
[4] prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(472, 472, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=472, bias=False)) => prune_out_channels on backbone.blocks.3.2._bn1 (BatchNorm2d(472, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=8
[5] prune_out_channels on backbone.blocks.3.2._bn1 (BatchNorm2d(472, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_33(HardtanhBackward0), #idxs=8
[6] prune_out_channels on _ElementWiseOp_33(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.2._project_conv (Conv2d(472, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=8
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.3.2._expand_conv
27
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([472])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.3.2._depthwise_conv
26
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([472])
backbone.blocks.3.2._depthwise_conv
34
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(438, 438, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=438, bias=False)) => prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(438, 438, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=438, bias=False)), #idxs=34
[1] prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(438, 438, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=438, bias=False)) => prune_out_channels on _ElementWiseOp_34(HardtanhBackward0), #idxs=34
[2] prune_out_channels on backbone.blocks.3.2._depthwise_conv (Conv2d(438, 438, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=438, bias=False)) => prune_out_channels on backbone.blocks.3.2._bn1 (BatchNorm2d(438, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=34
[3] prune_out_channels on backbone.blocks.3.2._bn1 (BatchNorm2d(438, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_33(HardtanhBackward0), #idxs=34
[4] prune_out_channels on _ElementWiseOp_33(HardtanhBackward0) => prune_in_channels on backbone.blocks.3.2._project_conv (Conv2d(438, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=34
[5] prune_out_channels on _ElementWiseOp_34(HardtanhBackward0) => prune_out_channels on backbone.blocks.3.2._bn0 (BatchNorm2d(438, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=34
[6] prune_out_channels on backbone.blocks.3.2._bn0 (BatchNorm2d(438, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.3.2._expand_conv (Conv2d(80, 438, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=34
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.3.2._depthwise_conv
26
tensor([ True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True, False,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True])
torch.Size([472])
torch.Size([438])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.3.2._expand_conv
27
tensor([ True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True, False,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True])
torch.Size([472])
torch.Size([438])
backbone.blocks.3.2._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.3.2._project_conv (Conv2d(438, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.3.2._project_conv (Conv2d(438, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.3.2._project_conv
25
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True])
torch.Size([80])
torch.Size([80])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 480, 10, 10]          38,400          38,400
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 480, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 480, 10, 10]          12,000          12,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 480, 10, 10]             960             960
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,760          53,760
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,362,472
Trainable params: 3,362,472
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.4.0._expand_conv
2

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.0._expand_conv (Conv2d(80, 478, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.0._expand_conv (Conv2d(80, 478, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=2
[1] prune_out_channels on backbone.blocks.4.0._expand_conv (Conv2d(80, 478, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.0._bn0 (BatchNorm2d(478, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=2
[2] prune_out_channels on backbone.blocks.4.0._bn0 (BatchNorm2d(478, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_14(HardtanhBackward0), #idxs=2
[3] prune_out_channels on _ElementWiseOp_14(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(478, 478, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=478, bias=False)), #idxs=2
[4] prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(478, 478, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=478, bias=False)) => prune_out_channels on backbone.blocks.4.0._bn1 (BatchNorm2d(478, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=2
[5] prune_out_channels on backbone.blocks.4.0._bn1 (BatchNorm2d(478, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_13(HardtanhBackward0), #idxs=2
[6] prune_out_channels on _ElementWiseOp_13(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.0._project_conv (Conv2d(478, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=2
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.0._expand_conv
24
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([478])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.4.0._depthwise_conv
23
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([480])
torch.Size([478])
backbone.blocks.4.0._depthwise_conv
1
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=477, bias=False)), #idxs=1
[1] prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on _ElementWiseOp_14(HardtanhBackward0), #idxs=1
[2] prune_out_channels on backbone.blocks.4.0._depthwise_conv (Conv2d(477, 477, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=477, bias=False)) => prune_out_channels on backbone.blocks.4.0._bn1 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=1
[3] prune_out_channels on backbone.blocks.4.0._bn1 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_13(HardtanhBackward0), #idxs=1
[4] prune_out_channels on _ElementWiseOp_13(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.0._project_conv (Conv2d(477, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=1
[5] prune_out_channels on _ElementWiseOp_14(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.0._bn0 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=1
[6] prune_out_channels on backbone.blocks.4.0._bn0 (BatchNorm2d(477, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.4.0._expand_conv (Conv2d(80, 477, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=1
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.4.0._depthwise_conv
23
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([478])
torch.Size([477])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.0._expand_conv
24
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([478])
torch.Size([477])
backbone.blocks.4.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.0._project_conv (Conv2d(477, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.0._project_conv (Conv2d(477, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.0._project_conv
22
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([112])
torch.Size([112])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,361,809
Trainable params: 3,361,809
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.4.1._expand_conv
19

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.1._expand_conv (Conv2d(112, 653, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.1._expand_conv (Conv2d(112, 653, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=19
[1] prune_out_channels on backbone.blocks.4.1._expand_conv (Conv2d(112, 653, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.1._bn0 (BatchNorm2d(653, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=19
[2] prune_out_channels on backbone.blocks.4.1._bn0 (BatchNorm2d(653, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_36(HardtanhBackward0), #idxs=19
[3] prune_out_channels on _ElementWiseOp_36(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(653, 653, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=653, bias=False)), #idxs=19
[4] prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(653, 653, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=653, bias=False)) => prune_out_channels on backbone.blocks.4.1._bn1 (BatchNorm2d(653, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=19
[5] prune_out_channels on backbone.blocks.4.1._bn1 (BatchNorm2d(653, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_35(HardtanhBackward0), #idxs=19
[6] prune_out_channels on _ElementWiseOp_35(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.1._project_conv (Conv2d(653, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=19
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.1._expand_conv
21
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False])
torch.Size([672])
torch.Size([653])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.4.1._depthwise_conv
20
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False])
torch.Size([672])
torch.Size([653])
backbone.blocks.4.1._depthwise_conv
34
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(619, 619, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=619, bias=False)) => prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(619, 619, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=619, bias=False)), #idxs=34
[1] prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(619, 619, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=619, bias=False)) => prune_out_channels on _ElementWiseOp_36(HardtanhBackward0), #idxs=34
[2] prune_out_channels on backbone.blocks.4.1._depthwise_conv (Conv2d(619, 619, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=619, bias=False)) => prune_out_channels on backbone.blocks.4.1._bn1 (BatchNorm2d(619, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=34
[3] prune_out_channels on backbone.blocks.4.1._bn1 (BatchNorm2d(619, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_35(HardtanhBackward0), #idxs=34
[4] prune_out_channels on _ElementWiseOp_35(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.1._project_conv (Conv2d(619, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=34
[5] prune_out_channels on _ElementWiseOp_36(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.1._bn0 (BatchNorm2d(619, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=34
[6] prune_out_channels on backbone.blocks.4.1._bn0 (BatchNorm2d(619, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.4.1._expand_conv (Conv2d(112, 619, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=34
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.4.1._depthwise_conv
20
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True])
torch.Size([653])
torch.Size([619])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.1._expand_conv
21
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True])
torch.Size([653])
torch.Size([619])
backbone.blocks.4.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.1._project_conv (Conv2d(619, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.1._project_conv (Conv2d(619, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.1._project_conv
19
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([112])
torch.Size([112])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 619, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 619, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 619, 10, 10]          15,475          15,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 672, 10, 10]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,348,400
Trainable params: 3,348,400
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.4.2._expand_conv
35

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.2._expand_conv (Conv2d(112, 637, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.2._expand_conv (Conv2d(112, 637, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=35
[1] prune_out_channels on backbone.blocks.4.2._expand_conv (Conv2d(112, 637, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.2._bn0 (BatchNorm2d(637, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=35
[2] prune_out_channels on backbone.blocks.4.2._bn0 (BatchNorm2d(637, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_38(HardtanhBackward0), #idxs=35
[3] prune_out_channels on _ElementWiseOp_38(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(637, 637, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=637, bias=False)), #idxs=35
[4] prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(637, 637, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=637, bias=False)) => prune_out_channels on backbone.blocks.4.2._bn1 (BatchNorm2d(637, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=35
[5] prune_out_channels on backbone.blocks.4.2._bn1 (BatchNorm2d(637, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_37(HardtanhBackward0), #idxs=35
[6] prune_out_channels on _ElementWiseOp_37(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.2._project_conv (Conv2d(637, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=35
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.2._expand_conv
18
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True])
torch.Size([672])
torch.Size([637])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.4.2._depthwise_conv
17
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True])
torch.Size([672])
torch.Size([637])
backbone.blocks.4.2._depthwise_conv
98
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(539, 539, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=539, bias=False)) => prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(539, 539, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=539, bias=False)), #idxs=98
[1] prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(539, 539, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=539, bias=False)) => prune_out_channels on _ElementWiseOp_38(HardtanhBackward0), #idxs=98
[2] prune_out_channels on backbone.blocks.4.2._depthwise_conv (Conv2d(539, 539, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=539, bias=False)) => prune_out_channels on backbone.blocks.4.2._bn1 (BatchNorm2d(539, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=98
[3] prune_out_channels on backbone.blocks.4.2._bn1 (BatchNorm2d(539, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_37(HardtanhBackward0), #idxs=98
[4] prune_out_channels on _ElementWiseOp_37(HardtanhBackward0) => prune_in_channels on backbone.blocks.4.2._project_conv (Conv2d(539, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=98
[5] prune_out_channels on _ElementWiseOp_38(HardtanhBackward0) => prune_out_channels on backbone.blocks.4.2._bn0 (BatchNorm2d(539, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=98
[6] prune_out_channels on backbone.blocks.4.2._bn0 (BatchNorm2d(539, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.4.2._expand_conv (Conv2d(112, 539, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=98
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.4.2._depthwise_conv
17
tensor([False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False, False, False,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True, False, False,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True, False,  True, False,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True, False,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True, False, False,  True, False,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
        False,  True,  True, False, False,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True, False, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True, False,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True, False,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True])
torch.Size([637])
torch.Size([539])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.2._expand_conv
18
tensor([False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False, False, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False, False, False,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True, False, False,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True, False,  True, False,  True,  True,  True, False,  True,  True,
         True,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True, False,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True, False, False,  True, False,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
        False,  True,  True, False, False,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True, False,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True, False,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True, False, False,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True, False,  True, False,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True, False,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True, False,  True,  True])
torch.Size([637])
torch.Size([539])
backbone.blocks.4.2._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.4.2._project_conv (Conv2d(539, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.4.2._project_conv (Conv2d(539, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.4.2._project_conv
16
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
torch.Size([112])
torch.Size([112])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 619, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 619, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 619, 10, 10]          15,475          15,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 539, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 539, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 539, 10, 10]          13,475          13,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 672, 10, 10]          75,264          75,264
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 672, 10, 10]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 672, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 672, 5, 5]          16,800          16,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 672, 5, 5]           1,344           1,344
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         129,024         129,024
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,314,751
Trainable params: 3,314,751
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.5.0._expand_conv
70

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.0._expand_conv (Conv2d(112, 602, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.0._expand_conv (Conv2d(112, 602, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=70
[1] prune_out_channels on backbone.blocks.5.0._expand_conv (Conv2d(112, 602, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.0._bn0 (BatchNorm2d(602, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=70
[2] prune_out_channels on backbone.blocks.5.0._bn0 (BatchNorm2d(602, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_10(HardtanhBackward0), #idxs=70
[3] prune_out_channels on _ElementWiseOp_10(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(602, 602, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=602, bias=False)), #idxs=70
[4] prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(602, 602, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=602, bias=False)) => prune_out_channels on backbone.blocks.5.0._bn1 (BatchNorm2d(602, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=70
[5] prune_out_channels on backbone.blocks.5.0._bn1 (BatchNorm2d(602, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_9(HardtanhBackward0), #idxs=70
[6] prune_out_channels on _ElementWiseOp_9(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.0._project_conv (Conv2d(602, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=70
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.0._expand_conv
15
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True, False,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True, False,  True,
         True,  True, False,  True, False,  True, False,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False, False,  True,  True, False,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
        False,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False, False,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True])
torch.Size([672])
torch.Size([602])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.5.0._depthwise_conv
14
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True, False,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True, False,  True,
         True,  True, False,  True, False,  True, False,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False, False,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False, False,  True,  True, False,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True, False,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True, False,
        False,  True, False,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
        False, False,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True, False, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True])
torch.Size([672])
torch.Size([602])
backbone.blocks.5.0._depthwise_conv
3
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(599, 599, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=599, bias=False)) => prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(599, 599, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=599, bias=False)), #idxs=3
[1] prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(599, 599, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=599, bias=False)) => prune_out_channels on _ElementWiseOp_10(HardtanhBackward0), #idxs=3
[2] prune_out_channels on backbone.blocks.5.0._depthwise_conv (Conv2d(599, 599, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=599, bias=False)) => prune_out_channels on backbone.blocks.5.0._bn1 (BatchNorm2d(599, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=3
[3] prune_out_channels on backbone.blocks.5.0._bn1 (BatchNorm2d(599, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_9(HardtanhBackward0), #idxs=3
[4] prune_out_channels on _ElementWiseOp_9(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.0._project_conv (Conv2d(599, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=3
[5] prune_out_channels on _ElementWiseOp_10(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.0._bn0 (BatchNorm2d(599, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=3
[6] prune_out_channels on backbone.blocks.5.0._bn0 (BatchNorm2d(599, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.5.0._expand_conv (Conv2d(112, 599, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=3
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.5.0._depthwise_conv
14
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True])
torch.Size([602])
torch.Size([599])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.0._expand_conv
15
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True])
torch.Size([602])
torch.Size([599])
backbone.blocks.5.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.0._project_conv (Conv2d(599, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.0._project_conv (Conv2d(599, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.0._project_conv
13
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([192])
torch.Size([192])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 619, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 619, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 619, 10, 10]          15,475          15,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 539, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 539, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 539, 10, 10]          13,475          13,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 599, 10, 10]          67,088          67,088
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 599, 10, 10]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 599, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 599, 5, 5]          14,975          14,975
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 599, 5, 5]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         115,008         115,008
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,290,442
Trainable params: 3,290,442
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.5.1._expand_conv
73

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.1._expand_conv (Conv2d(192, 1079, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.1._expand_conv (Conv2d(192, 1079, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=73
[1] prune_out_channels on backbone.blocks.5.1._expand_conv (Conv2d(192, 1079, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.1._bn0 (BatchNorm2d(1079, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=73
[2] prune_out_channels on backbone.blocks.5.1._bn0 (BatchNorm2d(1079, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_40(HardtanhBackward0), #idxs=73
[3] prune_out_channels on _ElementWiseOp_40(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(1079, 1079, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1079, bias=False)), #idxs=73
[4] prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(1079, 1079, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1079, bias=False)) => prune_out_channels on backbone.blocks.5.1._bn1 (BatchNorm2d(1079, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=73
[5] prune_out_channels on backbone.blocks.5.1._bn1 (BatchNorm2d(1079, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_39(HardtanhBackward0), #idxs=73
[6] prune_out_channels on _ElementWiseOp_39(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.1._project_conv (Conv2d(1079, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=73
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.1._expand_conv
12
tensor([ True,  True, False,  ...,  True,  True,  True])
torch.Size([1152])
torch.Size([1079])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.5.1._depthwise_conv
11
tensor([ True,  True, False,  ...,  True,  True,  True])
torch.Size([1152])
torch.Size([1079])
backbone.blocks.5.1._depthwise_conv
142
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(937, 937, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=937, bias=False)) => prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(937, 937, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=937, bias=False)), #idxs=142
[1] prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(937, 937, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=937, bias=False)) => prune_out_channels on _ElementWiseOp_40(HardtanhBackward0), #idxs=142
[2] prune_out_channels on backbone.blocks.5.1._depthwise_conv (Conv2d(937, 937, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=937, bias=False)) => prune_out_channels on backbone.blocks.5.1._bn1 (BatchNorm2d(937, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=142
[3] prune_out_channels on backbone.blocks.5.1._bn1 (BatchNorm2d(937, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_39(HardtanhBackward0), #idxs=142
[4] prune_out_channels on _ElementWiseOp_39(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.1._project_conv (Conv2d(937, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=142
[5] prune_out_channels on _ElementWiseOp_40(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.1._bn0 (BatchNorm2d(937, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=142
[6] prune_out_channels on backbone.blocks.5.1._bn0 (BatchNorm2d(937, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.5.1._expand_conv (Conv2d(192, 937, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=142
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.5.1._depthwise_conv
11
tensor([False,  True,  True,  ...,  True,  True,  True])
torch.Size([1079])
torch.Size([937])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.1._expand_conv
12
tensor([False,  True,  True,  ...,  True,  True,  True])
torch.Size([1079])
torch.Size([937])
backbone.blocks.5.1._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.1._project_conv (Conv2d(937, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.1._project_conv (Conv2d(937, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.1._project_conv
10
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([192])
torch.Size([192])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 619, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 619, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 619, 10, 10]          15,475          15,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 539, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 539, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 539, 10, 10]          13,475          13,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 599, 10, 10]          67,088          67,088
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 599, 10, 10]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 599, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 599, 5, 5]          14,975          14,975
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 599, 5, 5]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         115,008         115,008
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 937, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 937, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 937, 5, 5]          23,425          23,425
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 3,201,647
Trainable params: 3,201,647
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.5.2._expand_conv
193

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.2._expand_conv (Conv2d(192, 959, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.2._expand_conv (Conv2d(192, 959, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=193
[1] prune_out_channels on backbone.blocks.5.2._expand_conv (Conv2d(192, 959, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.2._bn0 (BatchNorm2d(959, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=193
[2] prune_out_channels on backbone.blocks.5.2._bn0 (BatchNorm2d(959, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_42(HardtanhBackward0), #idxs=193
[3] prune_out_channels on _ElementWiseOp_42(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(959, 959, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=959, bias=False)), #idxs=193
[4] prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(959, 959, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=959, bias=False)) => prune_out_channels on backbone.blocks.5.2._bn1 (BatchNorm2d(959, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=193
[5] prune_out_channels on backbone.blocks.5.2._bn1 (BatchNorm2d(959, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_41(HardtanhBackward0), #idxs=193
[6] prune_out_channels on _ElementWiseOp_41(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.2._project_conv (Conv2d(959, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=193
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.2._expand_conv
9
tensor([ True,  True,  True,  ..., False, False,  True])
torch.Size([1152])
torch.Size([959])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.5.2._depthwise_conv
8
tensor([ True,  True,  True,  ..., False, False,  True])
torch.Size([1152])
torch.Size([959])
backbone.blocks.5.2._depthwise_conv
335
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(624, 624, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=624, bias=False)) => prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(624, 624, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=624, bias=False)), #idxs=335
[1] prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(624, 624, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=624, bias=False)) => prune_out_channels on _ElementWiseOp_42(HardtanhBackward0), #idxs=335
[2] prune_out_channels on backbone.blocks.5.2._depthwise_conv (Conv2d(624, 624, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=624, bias=False)) => prune_out_channels on backbone.blocks.5.2._bn1 (BatchNorm2d(624, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=335
[3] prune_out_channels on backbone.blocks.5.2._bn1 (BatchNorm2d(624, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_41(HardtanhBackward0), #idxs=335
[4] prune_out_channels on _ElementWiseOp_41(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.2._project_conv (Conv2d(624, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=335
[5] prune_out_channels on _ElementWiseOp_42(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.2._bn0 (BatchNorm2d(624, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=335
[6] prune_out_channels on backbone.blocks.5.2._bn0 (BatchNorm2d(624, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.5.2._expand_conv (Conv2d(192, 624, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=335
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.5.2._depthwise_conv
8
tensor([ True,  True,  True,  True, False, False,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True, False,  True, False, False,  True,  True,  True, False,  True,
         True,  True, False,  True,  True, False,  True,  True, False, False,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
         True,  True,  True,  True, False, False, False, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False, False,  True, False,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True, False, False, False,
        False, False, False, False,  True, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True, False,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True, False, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
        False,  True,  True,  True, False,  True,  True, False, False,  True,
         True,  True, False, False, False,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True, False,
         True,  True,  True, False, False, False,  True,  True,  True, False,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False, False,  True,  True,  True, False,
        False, False,  True, False, False, False,  True,  True, False,  True,
        False,  True,  True,  True, False,  True,  True, False, False, False,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
         True,  True,  True, False,  True,  True, False, False, False, False,
         True, False,  True,  True, False,  True, False, False, False,  True,
         True,  True,  True, False,  True,  True, False,  True, False, False,
         True,  True,  True, False,  True, False,  True, False, False, False,
         True,  True, False,  True,  True, False,  True,  True, False, False,
         True,  True,  True, False, False,  True,  True, False, False,  True,
        False, False,  True,  True,  True, False,  True, False,  True,  True,
        False,  True, False,  True,  True, False, False,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False, False,  True,
        False,  True,  True, False,  True,  True, False,  True, False,  True,
        False,  True,  True, False, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True, False,  True, False,  True,  True,  True, False, False,  True,
         True, False, False, False,  True,  True, False,  True,  True, False,
         True, False,  True, False, False, False,  True, False, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True, False, False,  True, False, False,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
        False, False,  True, False,  True,  True,  True, False, False,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True, False, False, False, False,  True,  True,  True,
         True,  True,  True,  True, False, False,  True, False,  True,  True,
         True, False,  True,  True, False,  True,  True, False,  True,  True,
        False,  True,  True, False, False, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True, False, False, False,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True,  True, False,  True, False, False, False,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False,  True,  True,
        False, False, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True, False,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True,  True, False, False,  True,  True, False, False,
         True,  True, False,  True,  True, False,  True, False, False, False,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
        False, False,  True, False, False,  True,  True,  True, False,  True,
        False,  True, False,  True,  True,  True, False,  True, False, False,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
        False,  True,  True,  True,  True,  True, False,  True,  True, False,
         True, False,  True,  True,  True, False, False,  True,  True,  True,
        False,  True,  True, False, False, False,  True, False,  True, False,
         True, False,  True,  True, False, False, False,  True,  True,  True,
         True,  True,  True,  True, False, False, False,  True, False,  True,
         True,  True, False,  True,  True, False, False,  True,  True,  True,
         True, False, False,  True, False, False,  True,  True,  True,  True,
         True,  True, False, False,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True, False,
        False,  True,  True, False,  True,  True, False,  True, False,  True,
         True, False, False, False, False,  True, False, False,  True, False,
         True, False,  True,  True, False, False,  True, False,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True, False,  True,  True, False,  True,  True, False, False,  True,
         True,  True, False,  True, False,  True,  True,  True,  True,  True,
         True, False, False,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True, False, False, False, False,
         True,  True,  True, False,  True, False,  True,  True, False, False,
        False,  True,  True,  True,  True, False, False,  True, False, False,
         True,  True,  True, False,  True,  True, False,  True, False, False,
        False,  True, False, False,  True,  True, False,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True,  True,  True,  True, False,
         True, False,  True,  True, False,  True, False,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([959])
torch.Size([624])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.2._expand_conv
9
tensor([ True,  True,  True,  True, False, False,  True,  True,  True,  True,
        False,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True, False,  True, False, False,  True,  True,  True, False,  True,
         True,  True, False,  True,  True, False,  True,  True, False, False,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True, False,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
         True,  True,  True,  True, False, False, False, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False, False, False, False,  True, False,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True, False, False, False,
        False, False, False, False,  True, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True, False,  True,  True,  True,  True,  True,  True,
         True, False, False, False,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True, False,  True, False, False,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True, False,
        False,  True,  True,  True, False,  True,  True, False, False,  True,
         True,  True, False, False, False,  True, False,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True, False,
         True,  True,  True, False, False, False,  True,  True,  True, False,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False, False,  True,  True,  True, False,
        False, False,  True, False, False, False,  True,  True, False,  True,
        False,  True,  True,  True, False,  True,  True, False, False, False,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True, False, False,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
         True,  True,  True, False,  True,  True, False, False, False, False,
         True, False,  True,  True, False,  True, False, False, False,  True,
         True,  True,  True, False,  True,  True, False,  True, False, False,
         True,  True,  True, False,  True, False,  True, False, False, False,
         True,  True, False,  True,  True, False,  True,  True, False, False,
         True,  True,  True, False, False,  True,  True, False, False,  True,
        False, False,  True,  True,  True, False,  True, False,  True,  True,
        False,  True, False,  True,  True, False, False,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False, False,  True,
        False,  True,  True, False,  True,  True, False,  True, False,  True,
        False,  True,  True, False, False,  True,  True,  True, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True, False,
         True, False,  True, False,  True,  True,  True, False, False,  True,
         True, False, False, False,  True,  True, False,  True,  True, False,
         True, False,  True, False, False, False,  True, False, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True, False, False,  True, False, False,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
        False, False,  True, False,  True,  True,  True, False, False,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True, False,  True, False, False, False, False,  True,  True,  True,
         True,  True,  True,  True, False, False,  True, False,  True,  True,
         True, False,  True,  True, False,  True,  True, False,  True,  True,
        False,  True,  True, False, False, False,  True, False,  True, False,
         True,  True,  True,  True,  True,  True, False, False, False,  True,
         True,  True,  True, False,  True,  True,  True,  True, False,  True,
         True,  True, False,  True, False, False, False,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False,  True,  True,
        False, False, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True, False,
         True,  True,  True, False,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True, False,  True,  True, False,  True,  True, False,
         True,  True,  True,  True,  True, False,  True, False,  True,  True,
         True,  True,  True,  True, False, False,  True,  True, False, False,
         True,  True, False,  True,  True, False,  True, False, False, False,
         True,  True,  True,  True,  True, False, False,  True, False,  True,
        False, False,  True, False, False,  True,  True,  True, False,  True,
        False,  True, False,  True,  True,  True, False,  True, False, False,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
        False,  True,  True,  True,  True,  True, False,  True,  True, False,
         True, False,  True,  True,  True, False, False,  True,  True,  True,
        False,  True,  True, False, False, False,  True, False,  True, False,
         True, False,  True,  True, False, False, False,  True,  True,  True,
         True,  True,  True,  True, False, False, False,  True, False,  True,
         True,  True, False,  True,  True, False, False,  True,  True,  True,
         True, False, False,  True, False, False,  True,  True,  True,  True,
         True,  True, False, False,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True, False,
        False,  True,  True, False,  True,  True, False,  True, False,  True,
         True, False, False, False, False,  True, False, False,  True, False,
         True, False,  True,  True, False, False,  True, False,  True,  True,
         True,  True,  True, False,  True,  True, False,  True,  True,  True,
         True, False,  True,  True, False,  True,  True, False, False,  True,
         True,  True, False,  True, False,  True,  True,  True,  True,  True,
         True, False, False,  True,  True, False,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True, False, False, False, False,
         True,  True,  True, False,  True, False,  True,  True, False, False,
        False,  True,  True,  True,  True, False, False,  True, False, False,
         True,  True,  True, False,  True,  True, False,  True, False, False,
        False,  True, False, False,  True,  True, False,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True, False, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True,  True,  True,  True, False,
         True, False,  True,  True, False,  True, False,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True])
torch.Size([959])
torch.Size([624])
backbone.blocks.5.2._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.2._project_conv (Conv2d(624, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.2._project_conv (Conv2d(624, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.2._project_conv
7
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([192])
torch.Size([192])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 619, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 619, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 619, 10, 10]          15,475          15,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 539, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 539, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 539, 10, 10]          13,475          13,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 599, 10, 10]          67,088          67,088
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 599, 10, 10]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 599, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 599, 5, 5]          14,975          14,975
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 599, 5, 5]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         115,008         115,008
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 937, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 937, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 937, 5, 5]          23,425          23,425
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93       [1, 624, 5, 5]         119,808         119,808
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94       [1, 624, 5, 5]           1,248           1,248
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95       [1, 624, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96       [1, 624, 5, 5]          15,600          15,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97       [1, 624, 5, 5]           1,248           1,248
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         119,808         119,808
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103      [1, 1152, 5, 5]          28,800          28,800
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 2,983,583
Trainable params: 2,983,583
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.5.3._expand_conv
274

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.3._expand_conv (Conv2d(192, 878, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.3._expand_conv (Conv2d(192, 878, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=274
[1] prune_out_channels on backbone.blocks.5.3._expand_conv (Conv2d(192, 878, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.3._bn0 (BatchNorm2d(878, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=274
[2] prune_out_channels on backbone.blocks.5.3._bn0 (BatchNorm2d(878, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_44(HardtanhBackward0), #idxs=274
[3] prune_out_channels on _ElementWiseOp_44(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(878, 878, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=878, bias=False)), #idxs=274
[4] prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(878, 878, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=878, bias=False)) => prune_out_channels on backbone.blocks.5.3._bn1 (BatchNorm2d(878, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=274
[5] prune_out_channels on backbone.blocks.5.3._bn1 (BatchNorm2d(878, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_43(HardtanhBackward0), #idxs=274
[6] prune_out_channels on _ElementWiseOp_43(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.3._project_conv (Conv2d(878, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=274
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.3._expand_conv
6
tensor([ True, False,  True,  ...,  True, False,  True])
torch.Size([1152])
torch.Size([878])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.5.3._depthwise_conv
5
tensor([ True, False,  True,  ...,  True, False,  True])
torch.Size([1152])
torch.Size([878])
backbone.blocks.5.3._depthwise_conv
392
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(486, 486, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=486, bias=False)) => prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(486, 486, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=486, bias=False)), #idxs=392
[1] prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(486, 486, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=486, bias=False)) => prune_out_channels on _ElementWiseOp_44(HardtanhBackward0), #idxs=392
[2] prune_out_channels on backbone.blocks.5.3._depthwise_conv (Conv2d(486, 486, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=486, bias=False)) => prune_out_channels on backbone.blocks.5.3._bn1 (BatchNorm2d(486, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=392
[3] prune_out_channels on backbone.blocks.5.3._bn1 (BatchNorm2d(486, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_43(HardtanhBackward0), #idxs=392
[4] prune_out_channels on _ElementWiseOp_43(HardtanhBackward0) => prune_in_channels on backbone.blocks.5.3._project_conv (Conv2d(486, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=392
[5] prune_out_channels on _ElementWiseOp_44(HardtanhBackward0) => prune_out_channels on backbone.blocks.5.3._bn0 (BatchNorm2d(486, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=392
[6] prune_out_channels on backbone.blocks.5.3._bn0 (BatchNorm2d(486, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.5.3._expand_conv (Conv2d(192, 486, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=392
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.5.3._depthwise_conv
5
tensor([False, False,  True, False, False,  True, False,  True,  True, False,
         True, False, False,  True,  True, False,  True, False, False,  True,
         True,  True,  True,  True, False, False, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False, False, False,  True,  True,
         True, False,  True,  True, False,  True,  True, False, False, False,
        False, False,  True,  True, False,  True,  True, False, False, False,
         True, False,  True,  True, False,  True, False, False, False,  True,
         True, False,  True,  True, False, False,  True,  True, False,  True,
        False, False,  True, False,  True, False,  True, False, False,  True,
         True,  True, False, False,  True,  True,  True, False, False,  True,
        False,  True, False,  True, False,  True, False,  True, False, False,
        False,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False, False, False,  True, False,  True, False, False,  True,  True,
        False, False, False,  True, False,  True, False, False,  True, False,
        False,  True,  True, False,  True, False,  True, False,  True, False,
        False,  True, False,  True, False,  True,  True,  True, False,  True,
         True, False,  True, False, False, False,  True, False,  True, False,
        False,  True,  True,  True, False, False, False, False,  True, False,
         True,  True, False, False, False, False,  True, False,  True, False,
         True, False, False,  True,  True, False, False,  True, False,  True,
         True,  True, False, False, False,  True,  True,  True, False,  True,
        False, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False, False, False,
         True, False,  True,  True, False,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
        False,  True, False,  True,  True,  True, False, False, False,  True,
         True, False, False,  True, False,  True, False, False,  True,  True,
        False, False, False, False,  True, False,  True, False, False,  True,
         True, False,  True, False, False, False,  True,  True,  True,  True,
        False,  True, False,  True, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True, False, False,  True, False, False, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True, False,
         True,  True,  True, False, False, False,  True,  True,  True,  True,
        False,  True, False, False, False, False, False, False,  True, False,
        False,  True, False, False,  True, False,  True, False,  True, False,
         True, False, False, False,  True, False, False, False,  True, False,
        False, False,  True,  True, False, False, False, False, False,  True,
        False, False, False,  True,  True,  True, False, False, False, False,
        False,  True,  True, False,  True, False, False,  True, False,  True,
        False,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True, False, False, False, False,
         True, False,  True,  True,  True,  True, False, False,  True,  True,
         True, False, False, False, False,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True, False,  True, False,  True, False, False,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True, False, False,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True, False,  True, False, False, False, False,
         True,  True, False, False,  True,  True,  True, False, False,  True,
        False,  True, False,  True,  True, False,  True,  True, False, False,
         True,  True,  True,  True, False,  True,  True, False, False,  True,
         True, False, False,  True, False, False,  True,  True, False,  True,
         True,  True,  True,  True, False, False,  True, False, False, False,
        False, False,  True,  True, False, False,  True,  True, False,  True,
         True,  True,  True, False, False,  True,  True, False,  True, False,
         True, False,  True,  True, False, False,  True, False,  True, False,
        False,  True,  True,  True,  True,  True, False, False, False, False,
        False,  True, False,  True, False, False,  True, False, False,  True,
         True,  True,  True,  True, False,  True, False, False,  True, False,
         True, False,  True,  True,  True, False, False,  True,  True,  True,
         True, False,  True, False, False,  True, False,  True,  True, False,
         True,  True,  True, False,  True, False, False,  True,  True, False,
        False, False, False,  True,  True, False,  True, False,  True, False,
         True, False,  True, False,  True, False,  True, False, False, False,
         True,  True, False,  True, False,  True,  True,  True, False,  True,
         True, False,  True, False,  True, False, False,  True, False,  True,
        False, False, False,  True, False, False,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True, False,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True, False,  True, False, False,  True, False, False,  True,
        False,  True, False,  True,  True,  True, False, False, False,  True,
         True,  True,  True, False,  True, False, False, False, False,  True,
         True, False,  True,  True,  True,  True,  True, False,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False, False, False,  True, False,  True, False, False,
        False,  True,  True, False,  True, False,  True,  True,  True, False,
        False,  True, False,  True, False,  True,  True, False,  True, False,
         True,  True,  True,  True, False,  True, False,  True, False,  True,
         True, False,  True, False, False, False,  True,  True, False,  True,
         True, False,  True,  True, False,  True, False,  True, False,  True,
         True, False,  True, False,  True, False,  True,  True, False, False,
         True,  True,  True, False, False, False,  True,  True, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True, False,
        False, False,  True,  True, False, False,  True,  True])
torch.Size([878])
torch.Size([486])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.3._expand_conv
6
tensor([False, False,  True, False, False,  True, False,  True,  True, False,
         True, False, False,  True,  True, False,  True, False, False,  True,
         True,  True,  True,  True, False, False, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True, False, False, False,  True,  True,
         True, False,  True,  True, False,  True,  True, False, False, False,
        False, False,  True,  True, False,  True,  True, False, False, False,
         True, False,  True,  True, False,  True, False, False, False,  True,
         True, False,  True,  True, False, False,  True,  True, False,  True,
        False, False,  True, False,  True, False,  True, False, False,  True,
         True,  True, False, False,  True,  True,  True, False, False,  True,
        False,  True, False,  True, False,  True, False,  True, False, False,
        False,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False, False, False,  True, False,  True, False, False,  True,  True,
        False, False, False,  True, False,  True, False, False,  True, False,
        False,  True,  True, False,  True, False,  True, False,  True, False,
        False,  True, False,  True, False,  True,  True,  True, False,  True,
         True, False,  True, False, False, False,  True, False,  True, False,
        False,  True,  True,  True, False, False, False, False,  True, False,
         True,  True, False, False, False, False,  True, False,  True, False,
         True, False, False,  True,  True, False, False,  True, False,  True,
         True,  True, False, False, False,  True,  True,  True, False,  True,
        False, False, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False,  True,  True, False, False, False,
         True, False,  True,  True, False,  True,  True,  True,  True, False,
         True,  True, False,  True,  True,  True,  True, False, False,  True,
        False,  True, False,  True,  True,  True, False, False, False,  True,
         True, False, False,  True, False,  True, False, False,  True,  True,
        False, False, False, False,  True, False,  True, False, False,  True,
         True, False,  True, False, False, False,  True,  True,  True,  True,
        False,  True, False,  True, False,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True, False, False,  True,  True,  True,
         True,  True,  True, False, False,  True, False, False, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True, False,
         True,  True,  True, False, False, False,  True,  True,  True,  True,
        False,  True, False, False, False, False, False, False,  True, False,
        False,  True, False, False,  True, False,  True, False,  True, False,
         True, False, False, False,  True, False, False, False,  True, False,
        False, False,  True,  True, False, False, False, False, False,  True,
        False, False, False,  True,  True,  True, False, False, False, False,
        False,  True,  True, False,  True, False, False,  True, False,  True,
        False,  True,  True, False, False,  True,  True,  True,  True,  True,
         True,  True, False,  True, False,  True, False, False, False, False,
         True, False,  True,  True,  True,  True, False, False,  True,  True,
         True, False, False, False, False,  True, False,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True, False,  True, False,  True, False, False,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True, False, False,
         True, False,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True, False,  True, False, False, False, False,
         True,  True, False, False,  True,  True,  True, False, False,  True,
        False,  True, False,  True,  True, False,  True,  True, False, False,
         True,  True,  True,  True, False,  True,  True, False, False,  True,
         True, False, False,  True, False, False,  True,  True, False,  True,
         True,  True,  True,  True, False, False,  True, False, False, False,
        False, False,  True,  True, False, False,  True,  True, False,  True,
         True,  True,  True, False, False,  True,  True, False,  True, False,
         True, False,  True,  True, False, False,  True, False,  True, False,
        False,  True,  True,  True,  True,  True, False, False, False, False,
        False,  True, False,  True, False, False,  True, False, False,  True,
         True,  True,  True,  True, False,  True, False, False,  True, False,
         True, False,  True,  True,  True, False, False,  True,  True,  True,
         True, False,  True, False, False,  True, False,  True,  True, False,
         True,  True,  True, False,  True, False, False,  True,  True, False,
        False, False, False,  True,  True, False,  True, False,  True, False,
         True, False,  True, False,  True, False,  True, False, False, False,
         True,  True, False,  True, False,  True,  True,  True, False,  True,
         True, False,  True, False,  True, False, False,  True, False,  True,
        False, False, False,  True, False, False,  True, False,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True, False,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True, False,  True, False, False,  True, False, False,  True,
        False,  True, False,  True,  True,  True, False, False, False,  True,
         True,  True,  True, False,  True, False, False, False, False,  True,
         True, False,  True,  True,  True,  True,  True, False,  True, False,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False, False, False,  True, False,  True, False, False,
        False,  True,  True, False,  True, False,  True,  True,  True, False,
        False,  True, False,  True, False,  True,  True, False,  True, False,
         True,  True,  True,  True, False,  True, False,  True, False,  True,
         True, False,  True, False, False, False,  True,  True, False,  True,
         True, False,  True,  True, False,  True, False,  True, False,  True,
         True, False,  True, False,  True, False,  True,  True, False, False,
         True,  True,  True, False, False, False,  True,  True, False,  True,
         True,  True,  True,  True,  True, False, False,  True,  True, False,
        False, False,  True,  True, False, False,  True,  True])
torch.Size([878])
torch.Size([486])
backbone.blocks.5.3._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.5.3._project_conv (Conv2d(486, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.5.3._project_conv (Conv2d(486, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.5.3._project_conv
4
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True])
torch.Size([192])
torch.Size([192])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 619, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 619, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 619, 10, 10]          15,475          15,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 539, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 539, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 539, 10, 10]          13,475          13,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 599, 10, 10]          67,088          67,088
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 599, 10, 10]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 599, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 599, 5, 5]          14,975          14,975
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 599, 5, 5]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         115,008         115,008
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 937, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 937, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 937, 5, 5]          23,425          23,425
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93       [1, 624, 5, 5]         119,808         119,808
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94       [1, 624, 5, 5]           1,248           1,248
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95       [1, 624, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96       [1, 624, 5, 5]          15,600          15,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97       [1, 624, 5, 5]           1,248           1,248
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         119,808         119,808
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100       [1, 486, 5, 5]          93,312          93,312
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101       [1, 486, 5, 5]             972             972
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102       [1, 486, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103       [1, 486, 5, 5]          12,150          12,150
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104       [1, 486, 5, 5]             972             972
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]          93,312          93,312
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107      [1, 1152, 5, 5]         221,184         221,184
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109      [1, 1152, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110      [1, 1152, 5, 5]          10,368          10,368
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111      [1, 1152, 5, 5]           2,304           2,304
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         368,640         368,640
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 2,708,525
Trainable params: 2,708,525
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.blocks.6.0._expand_conv
211

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.6.0._expand_conv (Conv2d(192, 941, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.6.0._expand_conv (Conv2d(192, 941, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=211
[1] prune_out_channels on backbone.blocks.6.0._expand_conv (Conv2d(192, 941, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.6.0._bn0 (BatchNorm2d(941, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=211
[2] prune_out_channels on backbone.blocks.6.0._bn0 (BatchNorm2d(941, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_5(HardtanhBackward0), #idxs=211
[3] prune_out_channels on _ElementWiseOp_5(HardtanhBackward0) => prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(941, 941, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=941, bias=False)), #idxs=211
[4] prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(941, 941, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=941, bias=False)) => prune_out_channels on backbone.blocks.6.0._bn1 (BatchNorm2d(941, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=211
[5] prune_out_channels on backbone.blocks.6.0._bn1 (BatchNorm2d(941, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_4(HardtanhBackward0), #idxs=211
[6] prune_out_channels on _ElementWiseOp_4(HardtanhBackward0) => prune_in_channels on backbone.blocks.6.0._project_conv (Conv2d(941, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=211
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.6.0._expand_conv
3
tensor([True, True, True,  ..., True, True, True])
torch.Size([1152])
torch.Size([941])
<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.6.0._depthwise_conv
2
tensor([True, True, True,  ..., True, True, True])
torch.Size([1152])
torch.Size([941])
backbone.blocks.6.0._depthwise_conv
73
Depthwise Detected

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(868, 868, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=868, bias=False)) => prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(868, 868, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=868, bias=False)), #idxs=73
[1] prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(868, 868, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=868, bias=False)) => prune_out_channels on _ElementWiseOp_5(HardtanhBackward0), #idxs=73
[2] prune_out_channels on backbone.blocks.6.0._depthwise_conv (Conv2d(868, 868, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=868, bias=False)) => prune_out_channels on backbone.blocks.6.0._bn1 (BatchNorm2d(868, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=73
[3] prune_out_channels on backbone.blocks.6.0._bn1 (BatchNorm2d(868, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_4(HardtanhBackward0), #idxs=73
[4] prune_out_channels on _ElementWiseOp_4(HardtanhBackward0) => prune_in_channels on backbone.blocks.6.0._project_conv (Conv2d(868, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=73
[5] prune_out_channels on _ElementWiseOp_5(HardtanhBackward0) => prune_out_channels on backbone.blocks.6.0._bn0 (BatchNorm2d(868, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=73
[6] prune_out_channels on backbone.blocks.6.0._bn0 (BatchNorm2d(868, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on backbone.blocks.6.0._expand_conv (Conv2d(192, 868, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=73
--------------------------------

<bound method DepthwiseConvPruner.prune_out_channels of <torch_pruning.pruner.function.DepthwiseConvPruner object at 0x7fb05250d4e0>>
backbone.blocks.6.0._depthwise_conv
2
tensor([ True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False, False,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True, False, False,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True, False,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True, False,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True])
torch.Size([941])
torch.Size([868])
<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.6.0._expand_conv
3
tensor([ True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False, False, False,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True, False,
         True, False, False,  True,  True,  True,  True, False,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True, False,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True, False, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True, False,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True, False, False,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False, False,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True, False,  True,  True,  True,  True,  True,  True,
        False,  True, False,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True, False,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
        False,  True,  True,  True,  True,  True,  True,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
        False, False,  True,  True,  True,  True, False,  True,  True,  True,
         True, False,  True,  True, False,  True,  True,  True,  True,  True,
         True, False,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True, False,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         True,  True,  True,  True,  True, False,  True,  True,  True,  True,
         True])
torch.Size([941])
torch.Size([868])
backbone.blocks.6.0._project_conv
0

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.blocks.6.0._project_conv (Conv2d(868, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.blocks.6.0._project_conv (Conv2d(868, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=0
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.blocks.6.0._project_conv
1
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True])
torch.Size([320])
torch.Size([320])
Starting Training Cycle
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 619, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 619, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 619, 10, 10]          15,475          15,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 539, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 539, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 539, 10, 10]          13,475          13,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 599, 10, 10]          67,088          67,088
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 599, 10, 10]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 599, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 599, 5, 5]          14,975          14,975
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 599, 5, 5]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         115,008         115,008
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 937, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 937, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 937, 5, 5]          23,425          23,425
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93       [1, 624, 5, 5]         119,808         119,808
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94       [1, 624, 5, 5]           1,248           1,248
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95       [1, 624, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96       [1, 624, 5, 5]          15,600          15,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97       [1, 624, 5, 5]           1,248           1,248
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         119,808         119,808
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100       [1, 486, 5, 5]          93,312          93,312
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101       [1, 486, 5, 5]             972             972
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102       [1, 486, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103       [1, 486, 5, 5]          12,150          12,150
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104       [1, 486, 5, 5]             972             972
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]          93,312          93,312
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107       [1, 868, 5, 5]         166,656         166,656
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108       [1, 868, 5, 5]           1,736           1,736
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109       [1, 868, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110       [1, 868, 5, 5]           7,812           7,812
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111       [1, 868, 5, 5]           1,736           1,736
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         277,760         277,760
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1280, 5, 5]         409,600         409,600
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1280, 5, 5]           2,560           2,560
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1280, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1280, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1280]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,405           6,405
============================================================================================================================
Total params: 2,559,425
Trainable params: 2,559,425
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Ended Training Cycle
backbone.head.0
12

--------------------------------
          Pruning Group
--------------------------------
[0] prune_out_channels on backbone.head.0 (Conv2d(320, 1268, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.head.0 (Conv2d(320, 1268, kernel_size=(1, 1), stride=(1, 1), bias=False)), #idxs=12
[1] prune_out_channels on backbone.head.0 (Conv2d(320, 1268, kernel_size=(1, 1), stride=(1, 1), bias=False)) => prune_out_channels on backbone.head.1 (BatchNorm2d(1268, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)), #idxs=12
[2] prune_out_channels on backbone.head.1 (BatchNorm2d(1268, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)) => prune_out_channels on _ElementWiseOp_3(HardtanhBackward0), #idxs=12
[3] prune_out_channels on _ElementWiseOp_3(HardtanhBackward0) => prune_out_channels on _ElementWiseOp_2(MeanBackward1), #idxs=12
[4] prune_out_channels on _ElementWiseOp_2(MeanBackward1) => prune_out_channels on _Reshape_0(), #idxs=12
[5] prune_out_channels on _Reshape_0() => prune_in_channels on backbone.fc (Linear(in_features=1268, out_features=5, bias=True)), #idxs=12
[6] prune_in_channels on backbone.fc (Linear(in_features=1268, out_features=5, bias=True)) => prune_out_channels on _ElementWiseOp_1(TBackward0), #idxs=12
--------------------------------

<bound method ConvPruner.prune_out_channels of <torch_pruning.pruner.function.ConvPruner object at 0x7fb05250d960>>
backbone.head.0
0
tensor([True, True, True,  ..., True, True, True])
torch.Size([1280])
torch.Size([1268])
2069
----------------------------------------------------------------------------------------------------------------------------
                                 Parent Layers             Layer (type)         Output Shape         Param #     Tr. Param #
============================================================================================================================
               RecycleNetwork/EfficientNetLite                 Conv2d-1      [1, 27, 75, 75]             729             729
               RecycleNetwork/EfficientNetLite            BatchNorm2d-2      [1, 27, 75, 75]              54              54
               RecycleNetwork/EfficientNetLite                  ReLU6-3      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-4      [1, 27, 75, 75]             243             243
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-5      [1, 27, 75, 75]              54              54
   RecycleNetwork/EfficientNetLite/MBConvBlock                  ReLU6-6      [1, 27, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-7      [1, 16, 75, 75]             432             432
   RecycleNetwork/EfficientNetLite/MBConvBlock            BatchNorm2d-8      [1, 16, 75, 75]              32              32
   RecycleNetwork/EfficientNetLite/MBConvBlock                 Conv2d-9      [1, 91, 75, 75]           1,456           1,456
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-10      [1, 91, 75, 75]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-11      [1, 91, 75, 75]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-12      [1, 91, 38, 38]             819             819
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-13      [1, 91, 38, 38]             182             182
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-14      [1, 24, 38, 38]           2,184           2,184
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-15      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-16     [1, 139, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-17     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-18     [1, 139, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-19     [1, 139, 38, 38]           1,251           1,251
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-20     [1, 139, 38, 38]             278             278
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-21      [1, 24, 38, 38]           3,336           3,336
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-22      [1, 24, 38, 38]              48              48
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-23     [1, 141, 38, 38]           3,384           3,384
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-24     [1, 141, 38, 38]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-25     [1, 141, 38, 38]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-26     [1, 141, 19, 19]           3,525           3,525
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-27     [1, 141, 19, 19]             282             282
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-28      [1, 40, 19, 19]           5,640           5,640
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-29      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-30     [1, 230, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-31     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-32     [1, 230, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-33     [1, 230, 19, 19]           5,750           5,750
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-34     [1, 230, 19, 19]             460             460
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-35      [1, 40, 19, 19]           9,200           9,200
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-36      [1, 40, 19, 19]              80              80
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-37     [1, 238, 19, 19]           9,520           9,520
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-38     [1, 238, 19, 19]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-39     [1, 238, 19, 19]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-40     [1, 238, 10, 10]           2,142           2,142
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-41     [1, 238, 10, 10]             476             476
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-42      [1, 80, 10, 10]          19,040          19,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-43      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-44     [1, 450, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-45     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-46     [1, 450, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-47     [1, 450, 10, 10]           4,050           4,050
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-48     [1, 450, 10, 10]             900             900
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-49      [1, 80, 10, 10]          36,000          36,000
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-50      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-51     [1, 438, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-52     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-53     [1, 438, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-54     [1, 438, 10, 10]           3,942           3,942
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-55     [1, 438, 10, 10]             876             876
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-56      [1, 80, 10, 10]          35,040          35,040
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-57      [1, 80, 10, 10]             160             160
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-58     [1, 477, 10, 10]          38,160          38,160
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-59     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-60     [1, 477, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-61     [1, 477, 10, 10]          11,925          11,925
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-62     [1, 477, 10, 10]             954             954
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-63     [1, 112, 10, 10]          53,424          53,424
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-64     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-65     [1, 619, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-66     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-67     [1, 619, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-68     [1, 619, 10, 10]          15,475          15,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-69     [1, 619, 10, 10]           1,238           1,238
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-70     [1, 112, 10, 10]          69,328          69,328
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-71     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-72     [1, 539, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-73     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-74     [1, 539, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-75     [1, 539, 10, 10]          13,475          13,475
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-76     [1, 539, 10, 10]           1,078           1,078
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-77     [1, 112, 10, 10]          60,368          60,368
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-78     [1, 112, 10, 10]             224             224
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-79     [1, 599, 10, 10]          67,088          67,088
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-80     [1, 599, 10, 10]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-81     [1, 599, 10, 10]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-82       [1, 599, 5, 5]          14,975          14,975
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-83       [1, 599, 5, 5]           1,198           1,198
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-84       [1, 192, 5, 5]         115,008         115,008
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-85       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-86       [1, 937, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-87       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-88       [1, 937, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-89       [1, 937, 5, 5]          23,425          23,425
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-90       [1, 937, 5, 5]           1,874           1,874
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-91       [1, 192, 5, 5]         179,904         179,904
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-92       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-93       [1, 624, 5, 5]         119,808         119,808
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-94       [1, 624, 5, 5]           1,248           1,248
   RecycleNetwork/EfficientNetLite/MBConvBlock                 ReLU6-95       [1, 624, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-96       [1, 624, 5, 5]          15,600          15,600
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-97       [1, 624, 5, 5]           1,248           1,248
   RecycleNetwork/EfficientNetLite/MBConvBlock                Conv2d-98       [1, 192, 5, 5]         119,808         119,808
   RecycleNetwork/EfficientNetLite/MBConvBlock           BatchNorm2d-99       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-100       [1, 486, 5, 5]          93,312          93,312
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-101       [1, 486, 5, 5]             972             972
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-102       [1, 486, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-103       [1, 486, 5, 5]          12,150          12,150
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-104       [1, 486, 5, 5]             972             972
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-105       [1, 192, 5, 5]          93,312          93,312
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-106       [1, 192, 5, 5]             384             384
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-107       [1, 868, 5, 5]         166,656         166,656
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-108       [1, 868, 5, 5]           1,736           1,736
   RecycleNetwork/EfficientNetLite/MBConvBlock                ReLU6-109       [1, 868, 5, 5]               0               0
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-110       [1, 868, 5, 5]           7,812           7,812
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-111       [1, 868, 5, 5]           1,736           1,736
   RecycleNetwork/EfficientNetLite/MBConvBlock               Conv2d-112       [1, 320, 5, 5]         277,760         277,760
   RecycleNetwork/EfficientNetLite/MBConvBlock          BatchNorm2d-113       [1, 320, 5, 5]             640             640
               RecycleNetwork/EfficientNetLite               Conv2d-114      [1, 1268, 5, 5]         405,760         405,760
               RecycleNetwork/EfficientNetLite          BatchNorm2d-115      [1, 1268, 5, 5]           2,536           2,536
               RecycleNetwork/EfficientNetLite                ReLU6-116      [1, 1268, 5, 5]               0               0
               RecycleNetwork/EfficientNetLite    AdaptiveAvgPool2d-117      [1, 1268, 1, 1]               0               0
               RecycleNetwork/EfficientNetLite              Dropout-118            [1, 1268]               0               0
               RecycleNetwork/EfficientNetLite               Linear-119               [1, 5]           6,345           6,345
============================================================================================================================
Total params: 2,555,501
Trainable params: 2,555,501
Non-trainable params: 0
----------------------------------------------------------------------------------------------------------------------------
Training Started
Epoch: 1, Training Loss: 0.225852, Validation Loss: 0.234185, Training Accuracy: 0.944974, Validation Accuracy: 0.934827
Validation loss decreased (inf --> 0.234185).  Saving model ...
Epoch: 2, Training Loss: 0.222128, Validation Loss: 0.230978, Training Accuracy: 0.945783, Validation Accuracy: 0.935014
Validation loss decreased (0.234185 --> 0.230978).  Saving model ...
Epoch: 3, Training Loss: 0.214600, Validation Loss: 0.226221, Training Accuracy: 0.946281, Validation Accuracy: 0.935014
Validation loss decreased (0.230978 --> 0.226221).  Saving model ...
Epoch: 4, Training Loss: 0.208014, Validation Loss: 0.225044, Training Accuracy: 0.945534, Validation Accuracy: 0.934827
Validation loss decreased (0.226221 --> 0.225044).  Saving model ...
Epoch: 5, Training Loss: 0.208385, Validation Loss: 0.222139, Training Accuracy: 0.947899, Validation Accuracy: 0.934080
Validation loss decreased (0.225044 --> 0.222139).  Saving model ...
Epoch: 6, Training Loss: 0.198241, Validation Loss: 0.220791, Training Accuracy: 0.946716, Validation Accuracy: 0.935387
Validation loss decreased (0.222139 --> 0.220791).  Saving model ...
Epoch: 7, Training Loss: 0.204153, Validation Loss: 0.217408, Training Accuracy: 0.946592, Validation Accuracy: 0.936134
Validation loss decreased (0.220791 --> 0.217408).  Saving model ...
Epoch: 8, Training Loss: 0.195962, Validation Loss: 0.218032, Training Accuracy: 0.947339, Validation Accuracy: 0.935201
EarlyStopping counter: 1 out of 10
Epoch: 9, Training Loss: 0.195547, Validation Loss: 0.216951, Training Accuracy: 0.948335, Validation Accuracy: 0.936321
Epoch 00009: reducing learning rate of group 0 to 1.0000e-06.
Validation loss decreased (0.217408 --> 0.216951).  Saving model ...
Epoch: 10, Training Loss: 0.192144, Validation Loss: 0.214860, Training Accuracy: 0.947775, Validation Accuracy: 0.936321
Validation loss decreased (0.216951 --> 0.214860).  Saving model ...
Epoch: 11, Training Loss: 0.195050, Validation Loss: 0.214998, Training Accuracy: 0.946965, Validation Accuracy: 0.935948
EarlyStopping counter: 1 out of 10
Epoch: 12, Training Loss: 0.193455, Validation Loss: 0.214100, Training Accuracy: 0.945969, Validation Accuracy: 0.936508
Validation loss decreased (0.214860 --> 0.214100).  Saving model ...
Epoch: 13, Training Loss: 0.198896, Validation Loss: 0.214256, Training Accuracy: 0.946903, Validation Accuracy: 0.935574
Epoch 00013: reducing learning rate of group 0 to 1.0000e-07.
EarlyStopping counter: 1 out of 10
Epoch: 14, Training Loss: 0.192381, Validation Loss: 0.214510, Training Accuracy: 0.948895, Validation Accuracy: 0.935948
EarlyStopping counter: 2 out of 10
Epoch: 15, Training Loss: 0.195797, Validation Loss: 0.213603, Training Accuracy: 0.947090, Validation Accuracy: 0.935574
Validation loss decreased (0.214100 --> 0.213603).  Saving model ...
Epoch: 16, Training Loss: 0.190983, Validation Loss: 0.214795, Training Accuracy: 0.947837, Validation Accuracy: 0.936508
EarlyStopping counter: 1 out of 10
Epoch: 17, Training Loss: 0.192227, Validation Loss: 0.215880, Training Accuracy: 0.948148, Validation Accuracy: 0.936508
Epoch 00017: reducing learning rate of group 0 to 1.0000e-08.
EarlyStopping counter: 2 out of 10
Epoch: 18, Training Loss: 0.199096, Validation Loss: 0.215449, Training Accuracy: 0.947090, Validation Accuracy: 0.935574
EarlyStopping counter: 3 out of 10
Epoch: 19, Training Loss: 0.196704, Validation Loss: 0.216703, Training Accuracy: 0.947899, Validation Accuracy: 0.935014
EarlyStopping counter: 4 out of 10
Epoch: 20, Training Loss: 0.202596, Validation Loss: 0.213939, Training Accuracy: 0.944911, Validation Accuracy: 0.935574
EarlyStopping counter: 5 out of 10
Epoch: 21, Training Loss: 0.193165, Validation Loss: 0.215151, Training Accuracy: 0.947090, Validation Accuracy: 0.936134
EarlyStopping counter: 6 out of 10
Epoch: 22, Training Loss: 0.193581, Validation Loss: 0.215648, Training Accuracy: 0.947090, Validation Accuracy: 0.936321
EarlyStopping counter: 7 out of 10
Epoch: 23, Training Loss: 0.202202, Validation Loss: 0.213735, Training Accuracy: 0.944413, Validation Accuracy: 0.936881
EarlyStopping counter: 8 out of 10
Epoch: 24, Training Loss: 0.192997, Validation Loss: 0.213453, Training Accuracy: 0.948584, Validation Accuracy: 0.936321
Validation loss decreased (0.213603 --> 0.213453).  Saving model ...
Epoch: 25, Training Loss: 0.190495, Validation Loss: 0.214013, Training Accuracy: 0.948273, Validation Accuracy: 0.936321
EarlyStopping counter: 1 out of 10
Epoch: 26, Training Loss: 0.188492, Validation Loss: 0.214565, Training Accuracy: 0.949269, Validation Accuracy: 0.937442
EarlyStopping counter: 2 out of 10
Epoch: 27, Training Loss: 0.196116, Validation Loss: 0.214323, Training Accuracy: 0.948086, Validation Accuracy: 0.937068
EarlyStopping counter: 3 out of 10
Epoch: 28, Training Loss: 0.198930, Validation Loss: 0.213492, Training Accuracy: 0.945409, Validation Accuracy: 0.936508
EarlyStopping counter: 4 out of 10
Epoch: 29, Training Loss: 0.200916, Validation Loss: 0.214718, Training Accuracy: 0.945036, Validation Accuracy: 0.936134
EarlyStopping counter: 5 out of 10
Epoch: 30, Training Loss: 0.195010, Validation Loss: 0.213944, Training Accuracy: 0.946343, Validation Accuracy: 0.937442
EarlyStopping counter: 6 out of 10
Epoch: 31, Training Loss: 0.189689, Validation Loss: 0.215879, Training Accuracy: 0.949704, Validation Accuracy: 0.935761
EarlyStopping counter: 7 out of 10
Epoch: 32, Training Loss: 0.197018, Validation Loss: 0.213848, Training Accuracy: 0.947712, Validation Accuracy: 0.935387
EarlyStopping counter: 8 out of 10
Epoch: 33, Training Loss: 0.191999, Validation Loss: 0.215238, Training Accuracy: 0.948210, Validation Accuracy: 0.935948
EarlyStopping counter: 9 out of 10
Epoch: 34, Training Loss: 0.189470, Validation Loss: 0.215351, Training Accuracy: 0.948957, Validation Accuracy: 0.936134
EarlyStopping counter: 10 out of 10
Early Stopping at Epoch: 34
Test Loss: 0.208377, Test Accuracy: 0.9343
